import logging
import datetime
import asyncio
import time
from typing import Optional
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, constants as tg_constants
from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)
from telegram.constants import ParseMode
from telegram.error import TelegramError, BadRequest

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
import data_manager as dm
import gemini_client as gc
# --- –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ò–ó jobs.py ---
# –ù–µ –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å last_job..., –æ–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ jobs.py –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ /status
from jobs import download_images, MAX_PHOTOS_TO_ANALYZE, notify_owner
# -------------------------------------------
from config import SCHEDULE_HOUR, SCHEDULE_MINUTE, SCHEDULE_TIMEZONE_STR, BOT_OWNER_ID, SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE
# --- –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LOCALIZED_TEXTS ---
from localization import get_text, get_chat_lang, update_chat_lang_cache, LOCALIZED_TEXTS
# ---------------------------------------
from telegram import __version__ as ptb_version


logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ---
bot_start_time = time.time()
last_job_run_time: Optional[datetime.datetime] = None
last_job_error: Optional[str] = None # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤ –∫–æ–Ω—Ü–µ jobs.py

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
async def is_user_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞."""
    if chat_id > 0: # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ "–∞–¥–º–∏–Ω"
        return True
    if not context.bot: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logger.error(f"–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞ {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        return False
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        # --- –ò–ó–ú–ï–ù–ï–ù–û –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º OWNER –≤–º–µ—Å—Ç–æ CREATOR ---
        return chat_member.status in [
            tg_constants.ChatMemberStatus.ADMINISTRATOR,
            tg_constants.ChatMemberStatus.OWNER # <-- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        ]
        # ------------------------------------------------------
    except TelegramError as e:
        # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        if "chat not found" in str(e).lower() or "user not found" in str(e).lower():
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞ {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False
    except Exception as e:
         logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞ {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}", exc_info=True)
         return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat: return

    chat_lang = await get_chat_lang(chat.id)
    settings = dm.get_chat_settings(chat.id) # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å enabled
    status_text = get_text("settings_enabled", chat_lang) if settings.get('enabled', True) else get_text("settings_disabled", chat_lang)

    logger.info(f"User {user.id} started bot in chat {chat.id}")
    await update.message.reply_html(
        get_text("start_message", chat_lang,
                 user_mention=user.mention_html(),
                 chat_title=f"'{chat.title}'" if chat.title else get_text('private_chat', chat_lang), # –£—Ç–æ—á–Ω—è–µ–º –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
                 schedule_time=f"{SCHEDULE_HOUR:02d}:{SCHEDULE_MINUTE:02d}",
                 schedule_tz=SCHEDULE_TIMEZONE_STR,
                 status=status_text.split(': ')[1] # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
                 ),
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üåê Language / –Ø–∑—ã–∫", callback_data="select_language")
        ]])
    )
    commands = [
        BotCommand("start", get_text("cmd_start_desc", chat_lang)),
        BotCommand("help", get_text("cmd_help_desc", chat_lang)),
        BotCommand("generate_now", get_text("cmd_generate_now_desc", chat_lang)),
        BotCommand("regenerate_story", get_text("cmd_regenerate_desc", chat_lang)),
        BotCommand("story_on", get_text("cmd_story_on_desc", chat_lang)),
        BotCommand("story_off", get_text("cmd_story_off_desc", chat_lang)),
        BotCommand("story_settings", get_text("cmd_settings_desc", chat_lang)),
        BotCommand("set_language", get_text("cmd_language_desc", chat_lang)),
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /status —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if user.id == BOT_OWNER_ID:
         commands.append(BotCommand("status", get_text("cmd_status_desc", chat_lang)))
    try:
        await context.bot.set_my_commands(commands) #, language_code=chat_lang[:2] if chat_lang else None) # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —è–∑—ã–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
    except TelegramError as e:
        logger.warning(f"Failed to set bot commands for chat {chat.id}: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat; user = update.effective_user
    if not chat or not user: return
    chat_lang = await get_chat_lang(chat.id)
    logger.debug(f"Help command called in chat {chat.id} by user {user.id}")
    await update.message.reply_text(
        get_text("help_message", chat_lang,
                 schedule_time=f"{SCHEDULE_HOUR:02d}:{SCHEDULE_MINUTE:02d}",
                 schedule_tz=SCHEDULE_TIMEZONE_STR),
        parse_mode=ParseMode.HTML # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )

async def generate_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat: return
    chat_lang = await get_chat_lang(chat.id)
    logger.info(f"User {user.username} requested /generate_now for chat {chat.id}")
    messages_current = dm.get_messages_for_chat(chat.id)
    if not messages_current:
        await update.message.reply_text(get_text("generating_now_no_messages", chat_lang))
        return

    photo_count = sum(1 for m in messages_current if m.get('type') == 'photo')
    photo_process_limit = min(photo_count, MAX_PHOTOS_TO_ANALYZE)
    photo_info_str = get_text("photo_info_text", chat_lang, count=photo_process_limit) if photo_count > 0 else ""
    msg_count_str = str(len(messages_current))

    msg = await update.message.reply_text(get_text("generating_now", chat_lang, msg_count=msg_count_str, photo_info=photo_info_str))

    try:
        downloaded_images = await download_images(context, messages_current, chat.id, MAX_PHOTOS_TO_ANALYZE)
        prepared_content = gc.prepare_story_parts(messages_current, downloaded_images)
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_generate_story ---
        story, error_msg = await gc.safe_generate_story(prepared_content)

        if story:
            final_message = ""; header_key = "story_ready_header"
            photo_note_str_res = get_text("photo_info_text", chat_lang, count=photo_process_limit) if downloaded_images else ""
            final_message_header = get_text(header_key, chat_lang, photo_info=photo_note_str_res)

            # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±—ç–∫–∞ ---
            # Callback data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–º (–∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üëç", callback_data=f"feedback_good_{msg.message_id}"),
                InlineKeyboardButton("üëé", callback_data=f"feedback_bad_{msg.message_id}")
            ]])

            try:
                MAX_MSG_LEN = 4096
                if len(final_message_header + story) > MAX_MSG_LEN:
                     logger.warning(f"/generate_now story too long for chat {chat.id}, splitting.")
                     await msg.edit_text(get_text("story_too_long", chat_lang, photo_info=photo_note_str_res))
                     await asyncio.sleep(0.5); parts = [story[j:j+MAX_MSG_LEN] for j in range(0, len(story), MAX_MSG_LEN)]
                     sent_msg = None
                     for k, part in enumerate(parts):
                         current_reply_markup = keyboard if k == len(parts) - 1 else None
                         sent_msg = await context.bot.send_message(chat_id=chat.id, text=part, reply_markup=current_reply_markup)
                         await asyncio.sleep(0.5)
                     # –û–±–Ω–æ–≤–∏–º ID –≤ callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                     if sent_msg:
                          keyboard = InlineKeyboardMarkup([[
                              InlineKeyboardButton("üëç", callback_data=f"feedback_good_{sent_msg.message_id}"),
                              InlineKeyboardButton("üëé", callback_data=f"feedback_bad_{sent_msg.message_id}")
                          ]]); await context.bot.edit_message_reply_markup(chat_id=chat.id, message_id=sent_msg.message_id, reply_markup=keyboard)
                else:
                     final_message = final_message_header + story
                     await msg.edit_text(final_message, reply_markup=keyboard)
                logger.info(get_text("story_sent", chat_lang) + f" Chat ID: {chat.id}")
                if error_msg: # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ—Ç –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                     try: await context.bot.send_message(chat_id=chat.id, text=get_text("proxy_note", chat_lang, note=error_msg))
                     except Exception as e_note: logger.warning(f"Failed to send proxy note for /generate_now: {e_note}")
            except TelegramError as e: logger.error(f"Telegram error sending/editing story (generate_now): {e}"); await update.message.reply_text(get_text("error_telegram", chat_lang, error=e))
            except Exception as e: logger.error(f"Unexpected error sending story (generate_now): {e}", exc_info=True); await update.message.reply_text(get_text("error_unexpected_send", chat_lang))
        else:
            logger.warning(f"Failed to generate story (generate_now) for chat {chat.id}. Reason: {error_msg}")
            await msg.edit_text(get_text("generation_failed", chat_lang, error=error_msg or 'Unknown'))
    except Exception as e:
         logger.error(f"General error in /generate_now for chat {chat.id}: {e}", exc_info=True)
         await msg.edit_text(get_text("error_db_generic", chat_lang)) # –ò–ª–∏ –¥—Ä—É–≥–∞—è –æ–±—â–∞—è –æ—à–∏–±–∫–∞


# --- –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ ---

async def regenerate_story(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω—ã)."""
    user = update.effective_user; chat = update.effective_chat;
    if not user or not chat: return
    chat_lang = await get_chat_lang(chat.id); logger.info(f"User {user.username} requested /regenerate_story for chat {chat.id}")
    messages_current = dm.get_messages_for_chat(chat.id)
    if not messages_current: await update.message.reply_text(get_text("regenerate_no_data", chat_lang)); return

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ photo_count –∏ photo_process_limit –ó–î–ï–°–¨ ---
    photo_count = sum(1 for m in messages_current if m.get('type') == 'photo')
    photo_process_limit = min(photo_count, MAX_PHOTOS_TO_ANALYZE)
    # ----------------------------------------------------------

    msg = await update.message.reply_text(get_text("regenerating", chat_lang))

    try:
        # --- –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
        downloaded_images = await download_images(context, messages_current, chat.id, MAX_PHOTOS_TO_ANALYZE)

        # --- –ò–ó–ú–ï–ù–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º photo_note_str –ü–û–°–õ–ï —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
        photo_note_str = get_text("photo_info_text", chat_lang, count=photo_process_limit) if downloaded_images else ""
        # -------------------------------------------------------------

        prepared_content = gc.prepare_story_parts(messages_current, downloaded_images)
        story, error_msg = await gc.safe_generate_story(prepared_content)
        if story:
            header_key = "story_ready_header"
            # –¢–µ–ø–µ—Ä—å photo_note_str –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            final_message_header = get_text(header_key, chat_lang, photo_info=photo_note_str)
            new_msg = await update.message.reply_text(final_message_header + story)
            keyboard = InlineKeyboardMarkup([[ InlineKeyboardButton("üëç", callback_data=f"feedback_good_{new_msg.message_id}"), InlineKeyboardButton("üëé", callback_data=f"feedback_bad_{new_msg.message_id}") ]])
            try: await context.bot.edit_message_reply_markup(chat_id=chat.id, message_id=new_msg.message_id, reply_markup=keyboard)
            except BadRequest: pass
            except TelegramError as e: logger.warning(f"Error updating reply markup in regenerate: {e}")

            try: await msg.delete()
            except Exception as e: logger.warning(f"Could not delete 'regenerating' message: {e}")

            if error_msg: await context.bot.send_message(chat_id=chat.id, text=get_text("proxy_note", chat_lang, note=error_msg))
        else: await msg.edit_text(get_text("generation_failed", chat_lang, error=error_msg or 'Unknown'))
    except Exception as e: logger.error(f"Error in /regenerate_story chat {chat.id}: {e}", exc_info=True); await msg.edit_text(get_text("error_db_generic", chat_lang))

async def story_on_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)."""
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat or not update.message or not update.message.text \
       or chat.type == tg_constants.ChatType.PRIVATE: return # –î–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_lang = await get_chat_lang(chat.id)

    is_admin = await is_user_admin(chat.id, user.id, context)
    if not is_admin:
        await update.message.reply_text(get_text("admin_only", chat_lang))
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É ---
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ '@' –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (—Å–∞–º—É –∫–æ–º–∞–Ω–¥—É)
    command_part = message_text.split('@')[0]
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã) –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    command = command_part.split()[0].lower()
    # -----------------------------------------

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    new_status = (command == "/story_on")

    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç '{message_text}'. –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command}'. –û–ø—Ä–µ–¥–µ–ª–µ–Ω new_status = {new_status} (—Ç–∏–ø: {type(new_status)})")

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    dm.update_chat_setting(chat.id, 'enabled', new_status)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    reply_text = get_text("story_enabled", chat_lang) if new_status else get_text("story_disabled", chat_lang)
    await update.message.reply_text(reply_text)

async def story_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)."""
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat or chat.type == tg_constants.ChatType.PRIVATE: return
    chat_lang = await get_chat_lang(chat.id)

    is_admin = await is_user_admin(chat.id, user.id, context)
    if not is_admin:
        await update.message.reply_text(get_text("admin_only", chat_lang))
        return

    settings = dm.get_chat_settings(chat.id)
    status_text = get_text("settings_enabled", chat_lang) if settings.get('enabled', True) else get_text("settings_disabled", chat_lang)
    lang_text = get_text("settings_language", chat_lang) + f" ({settings.get('lang', DEFAULT_LANGUAGE)})"

    await update.message.reply_text(
        f"{get_text('settings_title', chat_lang, chat_title=chat.title)}\n"
        f"- {status_text}\n"
        f"- {lang_text}"
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫."""
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat: return

    buttons = []
    for lang_code in SUPPORTED_LANGUAGES:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Å–∞–º–æ–º —è–∑—ã–∫–µ
        lang_name = LOCALIZED_TEXTS.get(lang_code, {}).get("lang_name", lang_code)
        buttons.append(InlineKeyboardButton(lang_name, callback_data=f"setlang_{lang_code}"))

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 2 –≤ —Ä—è–¥)
    keyboard_markup = InlineKeyboardMarkup([buttons[i:i + 2] for i in range(0, len(buttons), 2)])
    current_lang = await get_chat_lang(chat.id)
    await update.message.reply_text(get_text("language_select", current_lang), reply_markup=keyboard_markup)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)."""
    user = update.effective_user
    if not user or user.id != BOT_OWNER_ID:
        # –ú–æ–∂–Ω–æ –ª–∏–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å, –ª–∏–±–æ –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å
        # await update.message.reply_text("Access denied.")
        return

    uptime_seconds = time.time() - bot_start_time
    uptime_str = str(datetime.timedelta(seconds=int(uptime_seconds)))
    active_chats_list = dm.get_enabled_chats() # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏ (–Ω—É–∂–Ω–æ –∏—Ö –≥–¥–µ-—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å)
    last_run_str = last_job_run_time.isoformat() if last_job_run_time else "Never"
    last_error_str = last_job_error if last_job_error else "None"

    status_text = get_text("status_command_reply", DEFAULT_LANGUAGE, # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º —è–∑—ã–∫–µ?
                           uptime=uptime_str,
                           active_chats=len(active_chats_list),
                           last_job_run=last_run_str,
                           last_job_error=last_error_str,
                           ptb_version=ptb_version
                           )
    await update.message.reply_text(status_text)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    if not query or not query.message: # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É query.message
        logger.warning("–ü–æ–ª—É—á–µ–Ω CallbackQuery –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        if query: await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        return

    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    user = query.from_user; chat = query.message.chat
    if not user or not chat: return

    data = query.data
    logger.info(f"User {user.id} pressed button with data: {data} in chat {chat.id}")
    chat_lang = await get_chat_lang(chat.id) # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ---
    if data == "select_language":
        buttons = []
        for lang_code in SUPPORTED_LANGUAGES:
            lang_name = LOCALIZED_TEXTS.get(lang_code, {}).get("lang_name", lang_code)
            buttons.append(InlineKeyboardButton(lang_name, callback_data=f"setlang_{lang_code}"))
        keyboard_markup = InlineKeyboardMarkup([buttons[i:i + 2] for i in range(0, len(buttons), 2)])

        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            await query.edit_message_text(
                text=get_text("language_select", chat_lang),
                reply_markup=keyboard_markup
            )
        except BadRequest as e:
            # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –∫–æ–ª–ª–±—ç–∫–∞

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞ (setlang_...)
    if data.startswith("setlang_"):
        lang_code = data.split("_", 1)[1]
        if lang_code in SUPPORTED_LANGUAGES:
            dm.update_chat_setting(chat.id, 'lang', lang_code)
            update_chat_lang_cache(chat.id, lang_code)
            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–º–µ–Ω—É —è–∑—ã–∫–∞
                await query.edit_message_text(text=get_text("language_set", lang_code), reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            except BadRequest as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: {e}")
            except TelegramError as e: logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                commands = [ BotCommand(c.command, get_text(f"cmd_{c.command}_desc", lang_code)) for c in await context.bot.get_my_commands() if c.command != 'status']
                if user.id == BOT_OWNER_ID: commands.append(BotCommand("status", get_text("cmd_status_desc", lang_code)))
                await context.bot.set_my_commands(commands)
            except Exception as e: logger.warning(f"Failed to update commands for lang {lang_code}: {e}")
        else:
             await query.answer(text="Invalid language selected.", show_alert=True) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if data.startswith("feedback_"):
        parts = data.split("_")
        if len(parts) == 3:
            rating_type = parts[1]; original_message_id_str = parts[2]
            try:
                original_message_id = int(original_message_id_str)
                rating_value = 1 if rating_type == "good" else -1 if rating_type == "bad" else 0
                if rating_value != 0:
                    dm.add_feedback(original_message_id, chat.id, user.id, rating_value)
                    await query.edit_message_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    await query.answer(text=get_text("feedback_thanks", chat_lang))
                else: await query.answer(text="Invalid feedback type.")
            except (ValueError, IndexError): logger.warning(f"Invalid feedback callback data: {data}"); await query.answer(text="Error processing feedback.")
            except BadRequest as e: logger.debug(f"Could not edit feedback buttons (maybe already removed): {e}") # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º BadRequest
            except TelegramError as e: logger.warning(f"Error removing feedback buttons: {e}"); await query.answer(text="Error processing feedback.")
        else: logger.warning(f"Incorrect feedback callback data format: {data}"); await query.answer(text="Error processing feedback.")
        return


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ handle_message –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º) ...
    message = update.message
    if not message or not message.from_user or not message.chat: return
    if message.from_user.is_bot: return
    chat_id = message.chat_id; user = message.from_user; timestamp = message.date or datetime.datetime.now(datetime.timezone.utc); username = user.username or user.first_name or f"User_{user.id}"
    message_data = {'message_id': message.message_id, 'user_id': user.id, 'username': username, 'timestamp': timestamp.isoformat(), 'type': 'unknown', 'content': None, 'file_id': None, 'file_unique_id': None, 'file_name': None}
    file_info = None
    if message.text: message_data['type'] = 'text'; message_data['content'] = message.text
    elif message.sticker: message_data['type'] = 'sticker'; message_data['content'] = message.sticker.emoji; file_info = message.sticker
    elif message.photo: message_data['type'] = 'photo'; message_data['content'] = message.caption; file_info = message.photo[-1]
    elif message.video: message_data['type'] = 'video'; message_data['content'] = message.caption; file_info = message.video
    elif message.audio: message_data['type'] = 'audio'; message_data['content'] = message.caption; file_info = message.audio
    elif message.voice: message_data['type'] = 'voice'; file_info = message.voice
    elif message.video_note: message_data['type'] = 'video_note'; file_info = message.video_note
    elif message.document: message_data['type'] = 'document'; message_data['content'] = message.caption; file_info = message.document
    elif message.caption and message_data['type'] == 'unknown': message_data['type'] = 'media_with_caption'; message_data['content'] = message.caption
    if file_info:
        try: message_data['file_id'] = file_info.file_id; message_data['file_unique_id'] = file_info.file_unique_id; message_data['file_name'] = getattr(file_info, 'file_name', None)
        except AttributeError: logger.warning(f"Failed to get file info for type {message_data['type']} in chat {chat_id}")
    if message_data['type'] != 'unknown': dm.add_message(chat_id, message_data)

# --- –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ---
# –ö–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ + '_desc'
LOCALIZED_TEXTS["ru"].update({
    "cmd_start_desc": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "cmd_help_desc": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ –∫–æ–º–∞–Ω–¥—ã",
    "cmd_generate_now_desc": "–ò—Å—Ç–æ—Ä–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
    "cmd_regenerate_desc": "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è",
    "cmd_story_on_desc": "–í–∫–ª. –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ê–¥–º–∏–Ω)",
    "cmd_story_off_desc": "–í—ã–∫–ª. –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ê–¥–º–∏–Ω)",
    "cmd_settings_desc": "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (–ê–¥–º–∏–Ω)",
    "cmd_language_desc": "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞",
    "cmd_status_desc": "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–í–ª–∞–¥–µ–ª–µ—Ü)",
    "private_chat": "–ª–∏—á–Ω–æ–º —á–∞—Ç–µ"
})
LOCALIZED_TEXTS["en"].update({
    "cmd_start_desc": "Greeting and info",
    "cmd_help_desc": "Show help and commands",
    "cmd_generate_now_desc": "Today's story immediately",
    "cmd_regenerate_desc": "Regenerate today's story",
    "cmd_story_on_desc": "Enable daily stories (Admin)",
    "cmd_story_off_desc": "Disable daily stories (Admin)",
    "cmd_settings_desc": "Show chat settings (Admin)",
    "cmd_language_desc": "Choose bot language",
    "cmd_status_desc": "Bot status (Owner)",
    "private_chat": "private chat"
})