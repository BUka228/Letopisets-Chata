# bot_handlers.py
import logging
import datetime
import asyncio
import time
import re
import pytz
from typing import Optional, Dict, Any, Tuple, List

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
import data_manager as dm
import gemini_client as gc
from config import (
    SCHEDULE_HOUR, SCHEDULE_MINUTE, SCHEDULE_TIMEZONE_STR, BOT_OWNER_ID,
    SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, COMMON_TIMEZONES, DATA_FILE,
    MESSAGE_FILTERS, SUPPORTED_GENRES
)
from localization import (
    get_text, get_chat_lang, update_chat_lang_cache, LOCALIZED_TEXTS,
    get_genre_name, get_period_name, get_user_friendly_proxy_error
)
from utils import download_images, MAX_PHOTOS_TO_ANALYZE, notify_owner, is_user_admin

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Telegram
from telegram import (
    Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, Chat, User
)
from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)
from telegram.constants import ParseMode, ChatAction, ChatType
from telegram.error import TelegramError, BadRequest
from telegram.helpers import escape_markdown

logger = logging.getLogger(__name__)

# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤ user_data
PENDING_TIME_INPUT_KEY = 'pending_time_input_for_msg'

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è bot_handlers)
# =============================================================================

def format_time_for_chat(utc_hour: int, utc_minute: int, target_tz_str: str) -> Tuple[str, str]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è UTC HH:MM –≤ —Å—Ç—Ä–æ–∫—É (HH:MM Z) –∏ –∫—Ä–∞—Ç–∫–æ–µ –∏–º—è TZ."""
    try:
        target_tz = pytz.timezone(target_tz_str)
        now_utc = datetime.datetime.now(pytz.utc)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É—á–µ—Ç–∞ DST
        time_utc = now_utc.replace(hour=utc_hour, minute=utc_minute, second=0, microsecond=0)
        time_local = time_utc.astimezone(target_tz)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É —Ç–∞–π–º–∑–æ–Ω—ã
        return time_local.strftime("%H:%M"), time_local.strftime("%Z")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ {utc_hour}:{utc_minute} –¥–ª—è TZ {target_tz_str}: {e}")
        return f"{utc_hour:02d}:{utc_minute:02d}", "UTC" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º UTC –ø—Ä–∏ –æ—à–∏–±–∫–µ

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# =============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    chat = update.effective_chat
    if not user or not chat: return

    chat_lang = await get_chat_lang(chat.id)
    settings = dm.get_chat_settings(chat.id)
    status_key = "settings_enabled" if settings.get('enabled', True) else "settings_disabled"
    status_text = get_text(status_key, chat_lang)

    chat_tz = dm.get_chat_timezone(chat.id)
    default_local_time, default_tz_short = format_time_for_chat(SCHEDULE_HOUR, SCHEDULE_MINUTE, chat_tz)

    logger.info(f"User {user.id} started bot in chat {chat.id} ({chat.type})")

    chat_title_text = f"'{chat.title}'" if chat.title else get_text('private_chat', chat_lang)
    if chat.type == ChatType.PRIVATE:
        chat_title_text = get_text('private_chat', chat_lang)

    await update.message.reply_html(
        get_text(
            "start_message", chat_lang,
            user_mention=user.mention_html(),
            chat_title=chat_title_text,
            schedule_time=default_local_time,
            schedule_tz=default_tz_short,
            status=f"<b>{status_text}</b>"
        )
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å –≤ /help –∏–ª–∏ /story_settings
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    chat = update.effective_chat
    if not chat: return
    chat_lang = await get_chat_lang(chat.id)
    logger.debug(f"Help cmd chat={chat.id}")
    await update.message.reply_html(get_text("help_message", chat_lang))

async def generate_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    chat = update.effective_chat
    if not user or not chat or not update.message: return

    chat_lang = await get_chat_lang(chat.id)
    logger.info(f"User {user.id} requested /generate_now in chat {chat.id}")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_current = dm.get_messages_for_chat(chat.id)
    if not messages_current:
        await update.message.reply_html(get_text("generating_now_no_messages", chat_lang))
        return

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_message = await update.message.reply_html(get_text("generating_now", chat_lang))
    status_message_id = status_message.message_id if status_message else None

    story = None
    error_msg_friendly = None
    sent_story_message = None
    try:
        # 3. –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        photo_messages = [m for m in messages_current if m.get('type') == 'photo' and m.get('file_unique_id')]
        total_photos_to_download = min(len(photo_messages), MAX_PHOTOS_TO_ANALYZE)
        downloaded_images: Dict[str, bytes] = {}

        if total_photos_to_download > 0 and context.bot and status_message_id:
             try:
                 await context.bot.edit_message_text(
                     chat_id=chat.id, message_id=status_message_id,
                     text=get_text("generating_status_downloading", chat_lang, count=0, total=total_photos_to_download),
                     parse_mode=ParseMode.HTML
                 )
                 # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ –º–µ—Ä–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –Ω–æ download_images –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏
             except BadRequest: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
             except TelegramError as e: logger.warning(f"Error updating download status: {e}")

        downloaded_images = await download_images(context, messages_current, chat.id)

        # 4. –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ò–ò —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        chat_genre = dm.get_chat_genre(chat.id)
        logger.info(f"[Chat {chat.id}] Generating story on demand with genre: {chat_genre}")

        if context.bot and status_message_id:
             try:
                 await context.bot.edit_message_text(
                     chat_id=chat.id, message_id=status_message_id,
                     text=get_text("generating_status_contacting_ai", chat_lang),
                     parse_mode=ParseMode.HTML
                 )
             except BadRequest: pass
             except TelegramError as e: logger.warning(f"Error updating AI status: {e}")

        # –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user-friendly –æ—à–∏–±–æ–∫
        story, error_msg_friendly = await gc.safe_generate_story(messages_current, downloaded_images, chat_genre, chat_lang)

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫—É
        if story:
            if context.bot and status_message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat.id, message_id=status_message_id,
                        text=get_text("generating_status_formatting", chat_lang),
                        parse_mode=ParseMode.HTML
                    )
                except BadRequest: pass
                except TelegramError as e: logger.warning(f"Error updating formatting status: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            photo_note_str_res = get_text("photo_info_text", chat_lang, count=len(downloaded_images)) if downloaded_images else ""
            final_message_header = get_text("story_ready_header", chat_lang, photo_info=photo_note_str_res)
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_message.edit_text(final_message_header, parse_mode=ParseMode.HTML)
            except (BadRequest, TelegramError):
                 # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ —à–ª–µ–º –Ω–æ–≤–æ–µ
                 logger.warning("Could not edit status message for header, sending new.")
                 try: await status_message.delete()
                 except Exception: pass
                 await context.bot.send_message(chat_id=chat.id, text=final_message_header, parse_mode=ParseMode.HTML)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üëç", callback_data="feedback_good_placeholder"),
                InlineKeyboardButton("üëé", callback_data="feedback_bad_placeholder")]])
            MAX_MSG_LEN = 4096 # Telegram limit
            if len(story) > MAX_MSG_LEN:
                logger.warning(f"/generate_now story too long chat={chat.id}, splitting.")
                parts = [story[i:i+MAX_MSG_LEN] for i in range(0, len(story), MAX_MSG_LEN)]
                for k, part in enumerate(parts):
                    current_reply_markup = keyboard if k == len(parts) - 1 else None
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º escape_markdown –µ—Å–ª–∏ parse_mode=Markdown
                    sent_story_message = await context.bot.send_message(
                        chat_id=chat.id, text=part, reply_markup=current_reply_markup, parse_mode=ParseMode.MARKDOWN
                    )
                    await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
            else:
                sent_story_message = await context.bot.send_message(
                    chat_id=chat.id, text=story, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –∫–Ω–æ–ø–∫–∞—Ö —Ñ–∏–¥–±–µ–∫–∞
            if sent_story_message:
                keyboard_updated = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üëç", callback_data=f"feedback_good_{sent_story_message.message_id}"),
                    InlineKeyboardButton("üëé", callback_data=f"feedback_bad_{sent_story_message.message_id}")]])
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=chat.id, message_id=sent_story_message.message_id, reply_markup=keyboard_updated
                    )
                except BadRequest: pass
                except TelegramError as e: logger.warning(f"Error updating feedback buttons: {e}")

            logger.info(f"Story sent successfully for chat {chat.id}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ (–Ω–æ –±–µ–∑ –æ—à–∏–±–∫–∏)
            if error_msg_friendly and not story: # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ —Ç–µ–ø–µ—Ä—å –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Ç.–∫. error_msg –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                 pass # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –Ω–∏–∂–µ
            elif error_msg_friendly: # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è —Å–≥–µ–Ω–µ—Ä–∏–ª–∞—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, safety fallback)
                 try: await context.bot.send_message(chat_id=chat.id, text=get_text("proxy_note", chat_lang, note=error_msg_friendly), parse_mode=ParseMode.HTML)
                 except Exception as e_note: logger.warning(f"Failed proxy note: {e_note}")

        else: # –ï—Å–ª–∏ story is None (–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
            logger.warning(f"Failed gen story chat={chat.id}. Reason: {error_msg_friendly}")
            final_error_msg = get_text("generation_failed_user_friendly", chat_lang, reason=error_msg_friendly or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π')
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–µ
            await notify_owner(context=context, message=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ –∑–∞–ø—Ä–æ—Å—É): {error_msg_friendly}", chat_id=chat.id, operation="generate_now", important=True)
            try:
                if status_message: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å
                    await status_message.edit_text(final_error_msg, parse_mode=ParseMode.HTML)
                else: # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º
                    await update.message.reply_html(final_error_msg)
            except Exception as edit_e:
                logger.error(f"Failed to edit status message on error: {edit_e}")
                await update.message.reply_html(final_error_msg) # Fallback

    except Exception as e:
        logger.exception(f"General error in /generate_now chat={chat.id}: {e}")
        await notify_owner(context=context, message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /generate_now", chat_id=chat.id, operation="generate_now", exception=e, important=True)
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ
        final_error_msg = get_text("error_telegram", chat_lang, error=e.__class__.__name__)
        try:
            if status_message: await status_message.edit_text(final_error_msg, parse_mode=ParseMode.HTML)
            else: await update.message.reply_html(final_error_msg)
        except Exception: await update.message.reply_html(final_error_msg)


async def regenerate_story(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è."""
    user = update.effective_user
    chat = update.effective_chat
    if not user or not chat or not update.message: return

    chat_lang = await get_chat_lang(chat.id)
    logger.info(f"User {user.id} requested /regenerate_story in chat {chat.id}")

    # –í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    messages_current = dm.get_messages_for_chat(chat.id)
    if not messages_current:
        await update.message.reply_html(get_text("regenerate_no_data", chat_lang))
        return

    status_message = await update.message.reply_html(get_text("regenerating", chat_lang))
    status_message_id = status_message.message_id if status_message else None

    story = None
    error_msg_friendly = None
    sent_story_message = None
    try:
        # --- –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ /generate_now, –Ω–æ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        photo_messages = [m for m in messages_current if m.get('type') == 'photo' and m.get('file_unique_id')]
        total_photos_to_download = min(len(photo_messages), MAX_PHOTOS_TO_ANALYZE)
        downloaded_images: Dict[str, bytes] = {}
        if total_photos_to_download > 0 and context.bot and status_message_id:
             try: await context.bot.edit_message_text(chat_id=chat.id, message_id=status_message_id, text=get_text("generating_status_downloading", chat_lang, count=0, total=total_photos_to_download), parse_mode=ParseMode.HTML)
             except BadRequest: pass; 
             except TelegramError as e: logger.warning(f"Error updating regen download status: {e}")
        downloaded_images = await download_images(context, messages_current, chat.id)

        # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ò–ò
        chat_genre = dm.get_chat_genre(chat.id)
        logger.info(f"[Chat {chat.id}] Regenerating story with genre: {chat_genre}")
        if context.bot and status_message_id:
             try: await context.bot.edit_message_text(chat_id=chat.id, message_id=status_message_id, text=get_text("generating_status_contacting_ai", chat_lang), parse_mode=ParseMode.HTML)
             except BadRequest: pass; 
             except TelegramError as e: logger.warning(f"Error updating regen AI status: {e}")
        story, error_msg_friendly = await gc.safe_generate_story(messages_current, downloaded_images, chat_genre, chat_lang)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—é..."
        try: await status_message.delete()
        except Exception as e: logger.warning(f"Could not delete 'regenerating' message: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫—É
        if story:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            photo_note_str = get_text("photo_info_text", chat_lang, count=len(downloaded_images)) if downloaded_images else ""
            final_message_header = get_text("story_ready_header", chat_lang, photo_info=photo_note_str) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await update.message.reply_html(final_message_header) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

            # –¢–µ–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üëç", callback_data="feedback_good_placeholder"), InlineKeyboardButton("üëé", callback_data="feedback_bad_placeholder")]])
            MAX_MSG_LEN = 4096
            if len(story) > MAX_MSG_LEN: logger.warning(f"/regenerate_story too long chat={chat.id}, splitting."); parts = [story[i:i+MAX_MSG_LEN] for i in range(0, len(story), MAX_MSG_LEN)]
            else: parts = [story]
            for k, part in enumerate(parts):
                current_reply_markup = keyboard if k == len(parts) - 1 else None
                sent_story_message = await context.bot.send_message(chat_id=chat.id, text=part, reply_markup=current_reply_markup, parse_mode=ParseMode.MARKDOWN)
                if k < len(parts) - 1: await asyncio.sleep(0.5)
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            if sent_story_message:
                keyboard_updated = InlineKeyboardMarkup([[InlineKeyboardButton("üëç", callback_data=f"feedback_good_{sent_story_message.message_id}"), InlineKeyboardButton("üëé", callback_data=f"feedback_bad_{sent_story_message.message_id}")]])
                try: await context.bot.edit_message_reply_markup(chat_id=chat.id, message_id=sent_story_message.message_id, reply_markup=keyboard_updated)
                except BadRequest: pass; 
                except TelegramError as e: logger.warning(f"Error updating regen feedback buttons: {e}")
            logger.info(f"Regenerated story sent successfully for chat {chat.id}")
            if error_msg_friendly: 
                try: await context.bot.send_message(chat_id=chat.id, text=get_text("proxy_note", chat_lang, note=error_msg_friendly), parse_mode=ParseMode.HTML); 
                except Exception as e: logger.warning(f"Failed regen proxy note: {e}")

        else: # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            logger.warning(f"Failed regenerate story chat={chat.id}. Reason: {error_msg_friendly}")
            final_error_msg = get_text("generation_failed_user_friendly", chat_lang, reason=error_msg_friendly or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π')
            await notify_owner(context=context, message=f"–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {error_msg_friendly}", chat_id=chat.id, operation="regenerate_story", important=True)
            await update.message.reply_html(final_error_msg) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    except Exception as e:
        logger.exception(f"Error in /regenerate_story chat={chat.id}: {e}")
        await notify_owner(context=context, message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /regenerate_story", chat_id=chat.id, operation="regenerate_story", exception=e, important=True)
        final_error_msg = get_text("error_telegram", chat_lang, error=e.__class__.__name__)
        try: await status_message.edit_text(final_error_msg, parse_mode=ParseMode.HTML) # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        except Exception: await update.message.reply_html(final_error_msg) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)."""
    user = update.effective_user
    if not user or user.id != BOT_OWNER_ID: return # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ bot_data
    bot_start_time = context.application.bot_data.get('bot_start_time', time.time())
    last_run_time_dt = context.application.bot_data.get('last_job_run_time')
    last_err = context.application.bot_data.get('last_job_error')

    uptime_seconds = time.time() - bot_start_time
    uptime_str = str(datetime.timedelta(seconds=int(uptime_seconds)))
    enabled_chats_list = dm.get_enabled_chats()
    last_run_str = last_run_time_dt.strftime("%Y-%m-%d %H:%M:%S UTC") if isinstance(last_run_time_dt, datetime.datetime) else "–ù–∏ —Ä–∞–∑—É"
    last_error_str = escape_markdown(last_err[:1000] + ('...' if len(last_err)>1000 else ''), version=2) if last_err else "–ù–µ—Ç" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PTB –≤–µ—Ä—Å–∏—é –∏–∑ __init__
    from telegram import __version__ as ptb_version

    status_text = get_text(
        "status_command_reply", DEFAULT_LANGUAGE, # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –Ω–∞ —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        uptime=uptime_str,
        active_chats=len(enabled_chats_list),
        last_job_run=last_run_str,
        last_job_error=last_error_str,
        ptb_version=ptb_version
    )
    await update.message.reply_html(status_text)


async def summarize_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–∞–º–º–∞—Ä–∏."""
    user = update.effective_user
    chat = update.effective_chat
    if not user or not chat or not update.message: return
    if chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]: return # –¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö

    chat_lang = await get_chat_lang(chat.id)
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(get_text("summarize_button_today", chat_lang), callback_data="summary_today"),
            InlineKeyboardButton(get_text("summarize_button_last_1h", chat_lang), callback_data="summary_last_1h"),
        ],
        [
            InlineKeyboardButton(get_text("summarize_button_last_3h", chat_lang), callback_data="summary_last_3h"),
            InlineKeyboardButton(get_text("summarize_button_last_24h", chat_lang), callback_data="summary_last_24h"),
        ],
         [InlineKeyboardButton(get_text("button_close", chat_lang), callback_data="summary_cancel")] # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    ])
    await update.message.reply_html(
        text=get_text("summarize_prompt_period", chat_lang),
        reply_markup=keyboard
    )


# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö –ò –ï–ì–û –ö–ù–û–ü–û–ö
# =============================================================================

async def story_settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)."""
    user = update.effective_user
    chat = update.effective_chat
    if not user or not chat or not update.message or chat.type == ChatType.PRIVATE: return

    if not await is_user_admin(chat.id, user.id, context):
        await update.message.reply_html(get_text("admin_only", await get_chat_lang(chat.id)))
        return

    # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.pop(PENDING_TIME_INPUT_KEY, None)

    await _display_settings_main(update, context, chat.id, user.id)


async def settings_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    if not query or not query.message: return
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫ —Å—Ä–∞–∑—É

    user = query.from_user
    chat = query.message.chat
    if not user or not chat: return

    chat_id = chat.id
    user_id = user.id
    message_id = query.message.message_id
    data = query.data
    chat_lang = await get_chat_lang(chat_id)

    logger.info(f"Settings CB: user={user_id}, chat={chat_id}, data='{data}'")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ ---
    if not await is_user_admin(chat_id, user_id, context):
        await query.answer(get_text("admin_only", chat_lang), show_alert=True)
        # –ù–µ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
        return

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ callback_data ---
    try:
        if data == 'settings_main':
            context.user_data.pop(PENDING_TIME_INPUT_KEY, None) # –°–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            await _display_settings_main(update, context, chat_id, user_id)
        elif data == 'settings_close':
             context.user_data.pop(PENDING_TIME_INPUT_KEY, None)
             await query.edit_message_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
             await query.answer(get_text("action_cancelled", chat_lang))
        elif data == 'settings_toggle_status':
            settings = dm.get_chat_settings(chat_id)
            new_status = not settings.get('enabled', True)
            success = dm.update_chat_setting(chat_id, 'enabled', new_status)
            if success:
                await _display_settings_main(update, context, chat_id, user_id)
                await query.answer(get_text("settings_saved_popup", chat_lang))
            else:
                await query.answer(get_text("error_db_generic", chat_lang), show_alert=True)
                await notify_owner(context=context, message="DB Error toggling status", chat_id=chat_id, user_id=user_id, operation="toggle_status", important=True)
        # --- –ü–æ–¥–º–µ–Ω—é ---
        elif data == 'settings_show_lang':
             await _display_settings_language(update, context, chat_id, user_id)
        elif data == 'settings_show_time':
             await _display_settings_time(update, context, chat_id, user_id)
        elif data == 'settings_show_tz':
             await _display_settings_timezone(update, context, chat_id, user_id)
        elif data == 'settings_show_genre':
             await _display_settings_genre(update, context, chat_id, user_id)
        # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π ---
        elif data.startswith('settings_set_lang_'):
            lang_code = data.split('_')[-1]
            if lang_code in SUPPORTED_LANGUAGES:
                success = dm.update_chat_setting(chat_id, 'lang', lang_code)
                if success:
                    update_chat_lang_cache(chat_id, lang_code) # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –Ω–æ–≤—ã–π —è–∑—ã–∫
                    await _update_bot_commands(context, chat_id, user_id, lang_code)
                    await _display_settings_main(update, context, chat_id, user_id) # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await query.answer(get_text("settings_lang_selected", lang_code))
                else: await query.answer(get_text("error_db_generic", await get_chat_lang(chat_id)), show_alert=True)
            else: logger.warning(f"Invalid lang code in CB: {data}")
        elif data == 'settings_set_time_default':
            success = dm.update_chat_setting(chat_id, 'custom_schedule_time', None)
            if success:
                await _display_settings_main(update, context, chat_id, user_id) # –í–æ–∑–≤—Ä–∞—Ç
                await query.answer(get_text("settings_saved_popup", chat_lang))
            else: await query.answer(get_text("error_db_generic", chat_lang), show_alert=True)
        elif data.startswith('settings_set_tz_'):
            tz_id = data.split('settings_set_tz_', 1)[-1] # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            if tz_id in COMMON_TIMEZONES:
                success = dm.update_chat_setting(chat_id, 'timezone', tz_id)
                if success:
                    await _display_settings_main(update, context, chat_id, user_id) # –í–æ–∑–≤—Ä–∞—Ç
                    await query.answer(get_text("settings_tz_selected", chat_lang))
                else: await query.answer(get_text("error_db_generic", chat_lang), show_alert=True)
            else: logger.warning(f"Invalid timezone id in CB: {data}")
        elif data.startswith('settings_set_genre_'):
            genre_key = data.split('_')[-1]
            if genre_key in SUPPORTED_GENRES:
                success = dm.update_chat_setting(chat_id, 'story_genre', genre_key)
                if success:
                    await _display_settings_main(update, context, chat_id, user_id) # –í–æ–∑–≤—Ä–∞—Ç
                    await query.answer(get_text("settings_genre_selected", chat_lang))
                else: await query.answer(get_text("error_db_generic", chat_lang), show_alert=True)
            else: logger.warning(f"Invalid genre key in CB: {data}")
        else:
            logger.warning(f"Unknown settings callback data received: {data}")

    except BadRequest as e:
        if "Message is not modified" in str(e): logger.debug(f"Settings message not modified: {e}")
        else: logger.error(f"BadRequest in settings CB handler: {e}", exc_info=True)
    except TelegramError as e:
        logger.error(f"TelegramError in settings CB handler: {e}", exc_info=True)
    except Exception as e:
        logger.exception(f"Unexpected error in settings CB handler: {e}")
        await notify_owner(context=context, message="Critical error in settings_callback_handler", operation="settings_callback", exception=e, important=True)

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ê–ó–ù–´–• –≠–ö–†–ê–ù–û–í –ù–ê–°–¢–†–û–ï–ö (–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ)
# =============================================================================

async def _display_settings_main(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ì–õ–ê–í–ù–û–ï –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    chat_lang = await get_chat_lang(chat_id)
    settings = dm.get_chat_settings(chat_id)
    chat = update.effective_chat or await context.bot.get_chat(chat_id)
    chat_title = f"'{chat.title}'" if chat.title else get_text('private_chat', chat_lang)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    status_text = get_text("settings_enabled", chat_lang) if settings.get('enabled', True) else get_text("settings_disabled", chat_lang)
    lang_name = LOCALIZED_TEXTS.get(settings.get('lang', DEFAULT_LANGUAGE), {}).get("lang_name", settings.get('lang', DEFAULT_LANGUAGE))
    chat_tz_str = settings.get('timezone', 'UTC')
    tz_display_name = COMMON_TIMEZONES.get(chat_tz_str, chat_tz_str)
    current_genre_key = settings.get('story_genre', 'default')
    genre_display_name = get_genre_name(current_genre_key, chat_lang)

    # –í—Ä–µ–º—è
    custom_time_utc_str = settings.get('custom_schedule_time')
    if custom_time_utc_str:
        try: ch, cm = map(int, custom_time_utc_str.split(':')); local_time_str, tz_short = format_time_for_chat(ch, cm, chat_tz_str); time_display = get_text("settings_time_custom", chat_lang, custom_time=f"{local_time_str} {tz_short}")
        except ValueError: time_display = f"{custom_time_utc_str} UTC (invalid!)"
    else: local_time_str, tz_short = format_time_for_chat(SCHEDULE_HOUR, SCHEDULE_MINUTE, chat_tz_str); time_display = get_text("settings_time_default", chat_lang, default_local_time=f"{local_time_str} {tz_short}")

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = get_text("settings_title", chat_lang, chat_title=chat_title) + "\n\n"
    text += f"‚ñ™Ô∏è {get_text('settings_status_label', chat_lang)}: {status_text}\n"
    text += f"‚ñ™Ô∏è {get_text('settings_language_label', chat_lang)}: {lang_name}\n"
    text += f"‚ñ™Ô∏è {get_text('settings_time_label', chat_lang)}: {time_display}\n"
    text += f"‚ñ™Ô∏è {get_text('settings_timezone_label', chat_lang)}: {tz_display_name}\n"
    text += f"‚ñ™Ô∏è {get_text('settings_genre_label', chat_lang)}: {genre_display_name}"

    # –ö–Ω–æ–ø–∫–∏
    toggle_btn_text = get_text("settings_button_toggle_on" if settings.get('enabled', True) else "settings_button_toggle_off", chat_lang)
    keyboard = [
        [InlineKeyboardButton(toggle_btn_text, callback_data='settings_toggle_status')],
        [
            InlineKeyboardButton(f"üåê {get_text('settings_language_label', chat_lang)}", callback_data='settings_show_lang'),
            InlineKeyboardButton(f"üé≠ {get_text('settings_genre_label', chat_lang)}", callback_data='settings_show_genre')
        ],
        [
            InlineKeyboardButton(f"‚è∞ {get_text('settings_time_label', chat_lang)}", callback_data='settings_show_time'),
            InlineKeyboardButton(f"üåç {get_text('settings_timezone_label', chat_lang)}", callback_data='settings_show_tz')
        ],
         [InlineKeyboardButton(get_text('button_close', chat_lang), callback_data='settings_close')]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    query = update.callback_query
    if query and query.message:
        await query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)
    elif update.message: # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /story_settings
        await update.message.reply_html(text, reply_markup=markup)

async def _display_settings_language(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    chat_lang = await get_chat_lang(chat_id)
    settings = dm.get_chat_settings(chat_id)
    current_lang = settings.get('lang', DEFAULT_LANGUAGE)

    text = get_text("settings_select_language_title", chat_lang)
    buttons = []
    for code in SUPPORTED_LANGUAGES:
        lang_name = LOCALIZED_TEXTS.get(code, {}).get("lang_name", code)
        prefix = "‚úÖ " if code == current_lang else ""
        buttons.append([InlineKeyboardButton(f"{prefix}{lang_name}", callback_data=f"settings_set_lang_{code}")])

    buttons.append([InlineKeyboardButton(get_text("button_back", chat_lang), callback_data="settings_main")])
    markup = InlineKeyboardMarkup(buttons)

    query = update.callback_query
    if query and query.message:
        await query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)

async def _display_settings_time(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏."""
    chat_lang = await get_chat_lang(chat_id)
    settings = dm.get_chat_settings(chat_id)
    chat_tz_str = settings.get('timezone', 'UTC')
    custom_time_utc_str = settings.get('custom_schedule_time')

    if custom_time_utc_str:
        try: ch, cm = map(int, custom_time_utc_str.split(':')); local_time, tz_short = format_time_for_chat(ch, cm, chat_tz_str); current_display = f"{local_time} {tz_short} ({custom_time_utc_str} UTC)"
        except ValueError: current_display = f"{custom_time_utc_str} UTC (invalid!)"
    else: local_time, tz_short = format_time_for_chat(SCHEDULE_HOUR, SCHEDULE_MINUTE, chat_tz_str); current_display = get_text("settings_time_default", chat_lang, default_local_time=f"{local_time} {tz_short}") + f" ({SCHEDULE_HOUR:02d}:{SCHEDULE_MINUTE:02d} UTC)"

    text = get_text("settings_select_time_title", chat_lang) + "\n"
    text += get_text("settings_time_current", chat_lang, current_time_display=current_display) + "\n\n"
    text += get_text("settings_time_prompt", chat_lang, chat_timezone=COMMON_TIMEZONES.get(chat_tz_str, chat_tz_str))

    keyboard = [
        [InlineKeyboardButton(get_text("settings_time_button_reset", chat_lang), callback_data="settings_set_time_default")],
        [InlineKeyboardButton(get_text("button_back", chat_lang), callback_data="settings_main")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    query = update.callback_query
    if query and query.message:
         context.user_data[PENDING_TIME_INPUT_KEY] = query.message.message_id
         logger.debug(f"Set pending time input for user {user_id} in chat {chat_id}, message {query.message.message_id}")
         await query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)
         # –û—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
         await query.answer(get_text("waiting_for_time_input", chat_lang))

async def _display_settings_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã."""
    chat_lang = await get_chat_lang(chat_id)
    settings = dm.get_chat_settings(chat_id)
    current_tz = settings.get('timezone', 'UTC')

    text = get_text("settings_select_timezone_title", chat_lang)
    buttons = []
    sorted_tzs = sorted(COMMON_TIMEZONES.items(), key=lambda item: item[1]) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    rows = []
    for tz_id, tz_name in sorted_tzs:
        prefix = "‚úÖ " if tz_id == current_tz else ""
        button = InlineKeyboardButton(f"{prefix}{tz_name}", callback_data=f"settings_set_tz_{tz_id}")
        # –°–æ–∑–¥–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if len(rows) == 0 or len(rows[-1]) == 2: rows.append([button])
        else: rows[-1].append(button)
    buttons.extend(rows) # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ —Ç–∞–π–º–∑–æ–Ω
    buttons.append([InlineKeyboardButton(get_text("button_back", chat_lang), callback_data="settings_main")])
    markup = InlineKeyboardMarkup(buttons)

    query = update.callback_query
    if query and query.message:
        await query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)

async def _display_settings_genre(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞."""
    chat_lang = await get_chat_lang(chat_id)
    settings = dm.get_chat_settings(chat_id)
    current_genre = settings.get('story_genre', 'default')

    text = get_text("settings_select_genre_title", chat_lang)
    buttons = []
    for key in SUPPORTED_GENRES.keys():
        prefix = "‚úÖ " if key == current_genre else ""
        button_text = get_text("genre_select_button_text", chat_lang, genre_name=get_genre_name(key, chat_lang))
        buttons.append([InlineKeyboardButton(f"{prefix}{button_text}", callback_data=f"settings_set_genre_{key}")])

    buttons.append([InlineKeyboardButton(get_text("button_back", chat_lang), callback_data="settings_main")])
    markup = InlineKeyboardMarkup(buttons)

    query = update.callback_query
    if query and query.message:
        await query.edit_message_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)


async def _update_bot_commands(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int, lang_code: str):
     """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞."""
     try:
         commands = [
             BotCommand("start", get_text("cmd_start_desc", lang_code)),
             BotCommand("help", get_text("cmd_help_desc", lang_code)),
             BotCommand("generate_now", get_text("cmd_generate_now_desc", lang_code)),
             BotCommand("regenerate_story", get_text("cmd_regenerate_desc", lang_code)),
             BotCommand("summarize", get_text("cmd_summarize_desc", lang_code)),
             BotCommand("story_settings", get_text("cmd_story_settings_desc", lang_code)),
             BotCommand("set_language", get_text("cmd_set_language_desc", lang_code)),
             BotCommand("set_timezone", get_text("cmd_set_timezone_desc", lang_code)),
         ]
         # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –º–µ–Ω—è–µ–º –∑–¥–µ—Å—å, –æ–Ω–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
         if chat_id > 0: # –õ–∏—á–Ω—ã–π —á–∞—Ç
             await context.bot.set_my_commands(commands)
         else: # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
             # TODO: –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤? –ü–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö –≤ –≥—Ä—É–ø–ø–µ.
             await context.bot.set_my_commands(commands) # scope=BotCommandScopeChat(chat_id) - –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∞–≤

         logger.info(f"–ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —è–∑—ã–∫–∞ '{lang_code}' –≤ —á–∞—Ç–µ {chat_id}")
     except Exception as e:
         logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —è–∑—ã–∫–∞ {lang_code} –≤ —á–∞—Ç–µ {chat_id}: {e}")

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö –§–ò–î–ë–ï–ö–ê –ò –°–ê–ú–ú–ê–†–ò (–ù–ï –ù–ê–°–¢–†–û–ô–ö–ò)
# =============================================================================

async def feedback_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ üëç / üëé."""
    query = update.callback_query
    if not query or not query.message: return
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    user = query.from_user; chat = query.message.chat
    if not user or not chat: return

    data = query.data; chat_lang = await get_chat_lang(chat.id)

    if data.startswith("feedback_"):
        parts = data.split("_")
        if len(parts) == 3:
            rating_type, original_message_id_str = parts[1], parts[2]
            try:
                original_message_id = int(original_message_id_str)
                rating_value = 1 if rating_type == "good" else -1 if rating_type == "bad" else 0
                if rating_value != 0:
                    dm.add_feedback(original_message_id, chat.id, user.id, rating_value)
                    try:
                        await query.edit_message_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                        await query.answer(text=get_text("feedback_thanks", chat_lang)) # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    except BadRequest as e:
                        if "message is not modified" in str(e).lower(): logger.debug(f"Feedback buttons already removed for msg {original_message_id}.")
                        else: logger.warning(f"BadRequest removing feedback buttons: {e}")
                    except TelegramError as e: logger.warning(f"Error removing feedback buttons: {e}")
                else: await query.answer("Invalid feedback type.", show_alert=True)
            except (ValueError, IndexError): logger.warning(f"Invalid feedback CB data: {data}"); await query.answer("Error processing feedback.")
        else: logger.warning(f"Incorrect feedback format: {data}"); await query.answer("Error processing feedback.")


async def summary_period_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏."""
    query = update.callback_query
    if not query or not query.message: logger.warning("summary CB: invalid query/message"); return
    await query.answer()
    user = query.from_user; chat = query.message.chat
    if not user or not chat: logger.warning("summary CB: no user/chat"); return

    chat_lang = await get_chat_lang(chat.id)
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if data == "summary_cancel":
        try: await query.edit_message_text(get_text("action_cancelled", chat_lang), reply_markup=None)
        except BadRequest: pass; 
        except TelegramError as e: logger.warning(f"Error editing summary cancel: {e}")
        return

    period_key = data.removeprefix("summary_")
    logger.info(f"User {user.id} requested summary for period '{period_key}' in chat {chat.id}")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_summarize: List[Dict[str, Any]] = []
    now_utc = datetime.datetime.now(datetime.timezone.utc)
    period_start_utc: Optional[datetime.datetime] = None
    try:
        if period_key == "today": period_start_utc = now_utc.replace(hour=0, minute=0, second=0, microsecond=0)
        elif period_key == "last_1h": period_start_utc = now_utc - datetime.timedelta(hours=1)
        elif period_key == "last_3h": period_start_utc = now_utc - datetime.timedelta(hours=3)
        elif period_key == "last_24h": period_start_utc = now_utc - datetime.timedelta(hours=24)
        else: logger.error(f"Unknown summary period key: {period_key}"); await context.bot.send_message(chat.id, "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."); return
        messages_to_summarize = dm.get_messages_for_chat_since(chat.id, period_start_utc)
    except Exception as db_err:
        logger.exception(f"DB error getting messages for summary chat {chat.id}:"); await notify_owner(context=context, message="DB Error getting summary messages", chat_id=chat.id, operation="get_summary_messages", exception=db_err, important=True)
        try: await query.edit_message_text(get_text("error_db_generic", chat_lang), reply_markup=None)
        except BadRequest: pass
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if not messages_to_summarize:
        logger.info(f"No messages found for summary period '{period_key}' chat {chat.id}")
        try: await query.edit_message_text(get_text("summarize_no_messages", chat_lang), reply_markup=None)
        except BadRequest: pass
        return

    # 3. –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    original_message_id = query.message.message_id
    status_message = None
    try: await query.edit_message_text(get_text("summarize_generating", chat_lang), reply_markup=None); status_message = query.message # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    except BadRequest: pass; 
    except TelegramError as e: logger.warning(f"Failed to edit summary prompt msg {original_message_id}: {e}")

    if context.bot: 
        try: await context.bot.send_chat_action(chat_id=chat.id, action=ChatAction.TYPING)
        except Exception: pass

    # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏
    summary_content, error_msg_friendly = await gc.safe_generate_summary(messages_to_summarize, chat_lang)

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é..." –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        if status_message and status_message.text == get_text("summarize_generating", chat_lang):
             try: await status_message.delete()
             except Exception: pass # –û—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã

        if summary_content:
            period_name = get_period_name(period_key, chat_lang)
            header_html = get_text("summarize_header", chat_lang, period_name=period_name)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–ª–æ —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await context.bot.send_message(chat.id, header_html, parse_mode=ParseMode.HTML)
            await asyncio.sleep(0.1) # –ü–∞—É–∑–∞
            try: await context.bot.send_message(chat.id, summary_content, parse_mode=ParseMode.MARKDOWN)
            except (BadRequest, TelegramError) as send_error:
                logger.error(f"Failed to send summary body as Markdown: {send_error}. Trying plain text.")
                try: await context.bot.send_message(chat.id, summary_content) # Fallback
                except Exception as fallback_err: logger.error(f"Failed to send summary body even as plain text: {fallback_err}"); raise # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ
            logger.info(f"Summary sent for period '{period_key}' in chat {chat.id}")
            if error_msg_friendly: 
                try: await context.bot.send_message(chat.id, get_text("proxy_note", chat_lang, note=error_msg_friendly), parse_mode=ParseMode.HTML); 
                except Exception as e: logger.warning(f"Failed summary proxy note: {e}")

        else: # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            logger.warning(f"Failed to generate summary for '{period_key}' chat={chat.id}. Reason: {error_msg_friendly}")
            final_error_text = get_text("summarize_failed_user_friendly", chat_lang, reason=error_msg_friendly or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π')
            await notify_owner(context=context, message=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ ({period_key}): {error_msg_friendly}", chat_id=chat.id, user_id=user.id, operation="generate_summary", important=True)
            await context.bot.send_message(chat.id, final_error_text, parse_mode=ParseMode.HTML) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    except Exception as e:
        logger.exception(f"Unexpected error processing summary result chat={chat.id}:")
        await notify_owner(context=context, message=f"Unexpected error processing summary result", chat_id=chat.id, user_id=user.id, operation="process_summary", exception=e, important=True)
        try: await context.bot.send_message(chat.id, get_text("error_db_generic", chat_lang))
        except Exception: pass


# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏)
# =============================================================================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î –ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏."""
    message = update.message
    if not message or not message.from_user or not message.chat: return
    if message.from_user.is_bot: return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤

    chat_id = message.chat_id
    user_id = message.from_user.id

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
    pending_msg_id = context.user_data.get(PENDING_TIME_INPUT_KEY)
    if pending_msg_id is not None and message.text and not message.text.startswith('/'):
        logger.debug(f"Handling expected time input from user {user_id} in chat {chat_id}")
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –°–†–ê–ó–£
        context.user_data.pop(PENDING_TIME_INPUT_KEY, None)
        chat_lang = await get_chat_lang(chat_id)
        chat_tz_str = dm.get_chat_timezone(chat_id)
        input_time_str = message.text.strip()

        if not re.fullmatch(r"^(?:[01]\d|2[0-3]):[0-5]\d$", input_time_str):
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=pending_msg_id,
                    text=get_text("settings_time_invalid_format", chat_lang),
                    parse_mode=ParseMode.HTML
                    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"
                )
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await message.delete()
            except Exception as e: logger.error(f"Error handling invalid time input message: {e}")
            return # –í—ã—Ö–æ–¥–∏–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        utc_time_to_save = None
        local_time_saved = input_time_str
        tz_short_name = "???"
        try:
            hour_local, minute_local = map(int, input_time_str.split(':'))
            local_tz = pytz.timezone(chat_tz_str)
            now_local_naive = datetime.datetime.now() # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            time_local_naive = now_local_naive.replace(hour=hour_local, minute=minute_local, second=0, microsecond=0)
            time_local_aware = local_tz.localize(time_local_naive, is_dst=None) # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–µ—Ç–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            time_utc = time_local_aware.astimezone(pytz.utc)
            utc_time_to_save = time_utc.strftime("%H:%M")
            tz_short_name = time_local_aware.strftime('%Z')
            logger.info(f"Chat {chat_id}: User input {input_time_str} ({chat_tz_str}/{tz_short_name}) converted to {utc_time_to_save} UTC.")
        except Exception as e:
            logger.error(f"Error converting time chat={chat_id}: Input='{input_time_str}', TZ='{chat_tz_str}'. Error: {e}", exc_info=True)
            try:
                 # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                 await context.bot.edit_message_text(chat_id=chat_id, message_id=pending_msg_id, text=get_text("error_db_generic", chat_lang))
                 await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            except Exception: pass
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = dm.update_chat_setting(chat_id, 'custom_schedule_time', utc_time_to_save)
        if success:
            text_to_show = get_text("settings_time_success", chat_lang, local_time=local_time_saved, tz_short=tz_short_name, utc_time=utc_time_to_save)
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=pending_msg_id,
                    text=text_to_show, parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("button_back", chat_lang), callback_data="settings_main")]]) # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
                )
                await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                await asyncio.sleep(5) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                await _display_settings_main(update, context, chat_id, user_id)
            except Exception as e: logger.error(f"Error updating settings message after time set: {e}")
        else:
            try: await context.bot.edit_message_text(chat_id=chat_id, message_id=pending_msg_id, text=get_text("error_db_generic", chat_lang))
            except Exception: pass
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç.–∫. —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ –≤–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏) ---
    if chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]: # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –≥—Ä—É–ø–ø
        timestamp = message.date or datetime.datetime.now(datetime.timezone.utc)
        username = message.from_user.username or message.from_user.first_name or f"User_{user_id}"
        message_data = {
            'message_id': message.message_id, 'user_id': user_id, 'username': username,
            'timestamp': timestamp.isoformat(), 'type': 'unknown', 'content': None,
            'file_id': None, 'file_unique_id': None, 'file_name': None }
        file_info = None; msg_type = 'unknown'

        if message.text: msg_type = 'text'; message_data['content'] = message.text
        elif message.sticker: msg_type = 'sticker'; message_data['content'] = message.sticker.emoji; file_info = message.sticker
        elif message.photo: msg_type = 'photo'; message_data['content'] = message.caption; file_info = message.photo[-1] # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        elif message.video: msg_type = 'video'; message_data['content'] = message.caption; file_info = message.video
        elif message.audio: msg_type = 'audio'; message_data['content'] = message.caption; file_info = message.audio
        elif message.voice: msg_type = 'voice'; file_info = message.voice
        elif message.video_note: msg_type = 'video_note'; file_info = message.video_note
        elif message.document: msg_type = 'document'; message_data['content'] = message.caption; file_info = message.document
        elif message.caption and msg_type == 'unknown': msg_type = 'media_with_caption'; message_data['content'] = message.caption # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –µ—Å—Ç—å, –∞ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω

        message_data['type'] = msg_type
        if file_info:
            try: message_data['file_id'] = file_info.file_id; message_data['file_unique_id'] = file_info.file_unique_id; message_data['file_name'] = getattr(file_info, 'file_name', None)
            except AttributeError: logger.warning(f"Failed to get file info type={msg_type} chat={chat_id}")

        if message_data['type'] != 'unknown': dm.add_message(chat_id, message_data)
        # else: logger.debug(f"Ignored unknown message type from {username} in chat {chat_id}")