# jobs.py
import logging
import asyncio
import datetime
import pytz # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError, NetworkError, BadRequest
from typing import Dict, List, Any, Optional
# –ò–º–ø–æ—Ä—Ç –¥–ª—è Retries
from tenacity import retry, stop_after_attempt, wait_fixed, wait_exponential, retry_if_exception_type, before_sleep_log

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
import data_manager as dm
import gemini_client as gc
# --- –í–û–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢ –ò–ó CONFIG ---
from config import (
    BOT_OWNER_ID,
    SCHEDULE_HOUR,
    SCHEDULE_MINUTE,
    JOB_CHECK_INTERVAL_MINUTES # <-- –í–û–¢ –û–ù!
)
# ------------------------------------
from localization import get_text, get_chat_lang

logger = logging.getLogger(__name__)
retry_log = logging.getLogger(__name__ + '.retry') # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è retries

# --- –ö–û–ù–°–¢–ê–ù–¢–ê ---
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
MAX_PHOTOS_TO_ANALYZE = 5

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ job) ---
last_job_run_time: Optional[datetime.datetime] = None
last_job_error: Optional[str] = None

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É ---
async def notify_owner(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞."""
    if not context.bot:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return
    if BOT_OWNER_ID and BOT_OWNER_ID != 0:
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            max_len = 4000
            truncated_message = message[:max_len] + '...' if len(message) > max_len else message
            await context.bot.send_message(chat_id=BOT_OWNER_ID, text=f"üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –õ–µ—Ç–æ–ø–∏—Å—Ü–∞:\n\n{truncated_message}")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É (ID: {BOT_OWNER_ID})")
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É (ID: {BOT_OWNER_ID}): {e}")
        except Exception as e:
             logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}", exc_info=True)
    else:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤–∞–∂–Ω—ã–º (—Å–æ–¥–µ—Ä–∂–∏—Ç "–æ—à–∏–±–∫–∞" –∏–ª–∏ "failed")
        if "–æ—à–∏–±–∫–∞" in message.lower() or "failed" in message.lower() or "error" in message.lower():
            logger.warning("BOT_OWNER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–µ—Ç—Ä–∞—è–º–∏ ---
@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(3), # –ñ–¥–∞—Ç—å 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    retry=retry_if_exception_type((TelegramError, NetworkError, TimeoutError)), # –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
    before_sleep=before_sleep_log(retry_log, logging.WARNING) # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
)
async def download_single_image(context: ContextTypes.DEFAULT_TYPE, file_id: str, chat_id_for_log: int) -> Optional[bytes]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    log_prefix = f"[Chat {chat_id_for_log}]"
    if context.bot is None:
        logger.error(f"{log_prefix} –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}.")
        return None
    try:
        logger.debug(f"{log_prefix} –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è file_id={file_id}...")
        file = await context.bot.get_file(file_id)
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—Ä–µ–º—è –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        image_bytearray = await asyncio.wait_for(file.download_as_bytearray(), timeout=30.0)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024 # 20 MB (–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç Gemini)
        if len(image_bytearray) > MAX_FILE_SIZE_BYTES:
            logger.warning(f"{log_prefix} –§–æ—Ç–æ {file_id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({len(image_bytearray)} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return None

        logger.debug(f"{log_prefix} –§–æ—Ç–æ {file_id} ({len(image_bytearray)} –±–∞–π—Ç) —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ.")
        return bytes(image_bytearray)
    except asyncio.TimeoutError:
        logger.error(f"{log_prefix} –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}.")
        return None # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ asyncio
    except (TelegramError, NetworkError) as e:
         logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ Telegram/–°–µ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e.__class__.__name__} - {e}")
         raise # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ retry
    except Exception as e:
         logger.error(f"{log_prefix} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}", exc_info=True)
         return None # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö


async def download_images(
    context: ContextTypes.DEFAULT_TYPE,
    messages: List[Dict[str, Any]],
    chat_id: int,
    max_photos: int
) -> Dict[str, bytes]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è download_single_image —Å retries."""
    images_data: Dict[str, bytes] = {}
    photo_messages = [m for m in messages if m.get('type') == 'photo' and m.get('file_id') and m.get('file_unique_id')]
    if not photo_messages: return images_data

    photo_messages.sort(key=lambda x: x.get('timestamp', ''))
    logger.info(f"[Chat {chat_id}] –ù–∞–π–¥–µ–Ω–æ {len(photo_messages)} —Ñ–æ—Ç–æ. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ {max_photos}...")

    tasks = []
    unique_ids_to_download = [] # –•—Ä–∞–Ω–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    # –û—Ç–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
    processed_unique_ids = set()
    for msg in photo_messages:
         if len(unique_ids_to_download) >= max_photos: break
         file_unique_id = msg.get('file_unique_id')
         file_id = msg.get('file_id')
         if file_unique_id and file_id and file_unique_id not in processed_unique_ids:
             tasks.append(asyncio.create_task(download_single_image(context, file_id, chat_id)))
             unique_ids_to_download.append(file_unique_id)
             processed_unique_ids.add(file_unique_id)

    if not tasks: return images_data

    logger.debug(f"[Chat {chat_id}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} –∑–∞–¥–∞—á —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    results = await asyncio.gather(*tasks, return_exceptions=True) # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_downloads = 0
    for i, unique_id in enumerate(unique_ids_to_download):
        result = results[i]
        if isinstance(result, bytes): # –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            images_data[unique_id] = result
            successful_downloads += 1
            logger.debug(f"[Chat {chat_id}] –§–æ—Ç–æ {unique_id} ({len(result)} –±–∞–π—Ç) —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        elif isinstance(result, Exception): # –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ retries
            logger.error(f"[Chat {chat_id}] –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ unique_id={unique_id}: {result.__class__.__name__}")
        else: # –í–µ—Ä–Ω—É–ª—Å—è None –∏–ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ
            logger.warning(f"[Chat {chat_id}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è {unique_id} –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –±–∞–π—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞).")

    logger.info(f"[Chat {chat_id}] –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {successful_downloads} –∏–∑ {len(unique_ids_to_download)} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.")
    return images_data

# --- –û—Å–Ω–æ–≤–Ω–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ---
async def daily_story_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–æ—à–ª–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏,
    –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    global last_job_run_time, last_job_error # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    job_start_time = datetime.datetime.now(pytz.utc) # –†–∞–±–æ—Ç–∞–µ–º —Å UTC
    last_job_run_time = job_start_time
    last_job_error = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    current_errors = [] # –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

    bot = context.bot; 
    if bot is None: logger.error("–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"); return
    bot_username = "UnknownBot"; 
    try: bot_username = (await bot.get_me()).username or "UnknownBot"
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞: {e}")

    logger.info(f"[{bot_username}] –ó–∞–ø—É—Å–∫ –ü–†–û–í–ï–†–ö–ò —á–∞—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π...")

    enabled_chat_ids = dm.get_enabled_chats()
    if not enabled_chat_ids: logger.info(f"[{bot_username}] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤."); return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    now_utc = datetime.datetime.now(pytz.utc)
    current_hour_utc = now_utc.hour
    current_minute_utc = now_utc.minute
    # –û–∫—Ä—É–≥–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª 5 –º–∏–Ω—É—Ç, —Ç–æ 10:03 —Å—Ç–∞–Ω–µ—Ç 10:00, 10:06 —Å—Ç–∞–Ω–µ—Ç 10:05
    current_minute_rounded = (current_minute_utc // JOB_CHECK_INTERVAL_MINUTES) * JOB_CHECK_INTERVAL_MINUTES

    logger.debug(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {now_utc.strftime('%H:%M')}, –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_hour_utc:02d}:{current_minute_rounded:02d}")

    processed_in_this_run = 0

    for chat_id in enabled_chat_ids:
        current_chat_log_prefix = f"[{bot_username}][Chat {chat_id}]"
        should_process = False
        target_hour = SCHEDULE_HOUR
        target_minute = SCHEDULE_MINUTE

        try:
            settings = dm.get_chat_settings(chat_id)
            custom_time_str = settings.get('custom_schedule_time')

            if custom_time_str: # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è
                try:
                    parts = custom_time_str.split(':')
                    target_hour = int(parts[0])
                    target_minute = int(parts[1])
                except (ValueError, IndexError):
                    logger.warning(f"{current_chat_log_prefix} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç custom_schedule_time '{custom_time_str}', –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                    # –û—Å—Ç–∞–≤–ª—è–µ–º target_hour/minute –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # else: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω–æ–µ –≤—ã—à–µ

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ß–ê–° –∏ –û–ö–†–£–ì–õ–ï–ù–ù–£–Æ –ú–ò–ù–£–¢–£
            if current_hour_utc == target_hour and current_minute_rounded == target_minute:
                logger.debug(f"{current_chat_log_prefix} –í—Ä–µ–º—è {target_hour:02d}:{target_minute:02d} —Å–æ–≤–ø–∞–ª–æ —Å —Ç–µ–∫—É—â–∏–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º {current_hour_utc:02d}:{current_minute_rounded:02d}. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—ç—Ç–æ –Ω–∞—à —Ñ–ª–∞–≥ "–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è")
                messages_exist = dm.get_messages_for_chat(chat_id) # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
                if messages_exist:
                    logger.info(f"{current_chat_log_prefix} –í—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ –∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è ({len(messages_exist)} —à—Ç.). –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!")
                    should_process = True
                    messages_to_process = messages_exist # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                else:
                     logger.debug(f"{current_chat_log_prefix} –í—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ, –Ω–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            # else: –í—Ä–µ–º—è –Ω–µ —Å–æ–≤–ø–∞–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —á–∞—Ç –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ

            if should_process:
                processed_in_this_run += 1
                story_sent = False # –§–ª–∞–≥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                chat_lang = settings.get('lang', DEFAULT_LANGUAGE)
                # --- –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
                logger.info(f"{current_chat_log_prefix} –°–æ–±—Ä–∞–Ω–æ {len(messages_to_process)} —Å–æ–æ–±—â.")
                downloaded_images = await download_images(context, messages_to_process, chat_id, MAX_PHOTOS_TO_ANALYZE)
                prepared_content = gc.prepare_story_parts(messages_to_process, downloaded_images)
                if not prepared_content: logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç."); current_errors.append(f"Chat {chat_id}: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"); continue # –ö —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞—Ç—É

                story, error_msg = await gc.safe_generate_story(prepared_content)
                if story:
                    # ... (–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
                    story_sent = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                else: # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü—Ä–∏—á–∏–Ω–∞: {error_msg}"); current_errors.append(f"Chat {chat_id}: Generation Error ({error_msg or 'Unknown'})")
                    try: await bot.send_message(chat_id=chat_id, text=get_text("daily_job_failed_chat", chat_lang, error=error_msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                    except Exception as e_err: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e_err}")
                        # ... (–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ...

                # --- –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –ø—Ä–∏ –£–°–ü–ï–®–ù–û–ô –æ—Ç–ø—Ä–∞–≤–∫–µ ---
                if story_sent:
                    dm.clear_messages_for_chat(chat_id)
                else:
                    logger.warning(f"{current_chat_log_prefix} –î–∞–Ω–Ω—ã–µ –ù–ï –æ—á–∏—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.")

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await asyncio.sleep(2)

        except Exception as e:
            logger.error(f"{current_chat_log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞: {e}", exc_info=True)
            current_errors.append(f"Chat {chat_id}: Critical Error ({e.__class__.__name__})")
            await asyncio.sleep(1) # –ü–∞—É–∑–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ ---
    last_job_error = "\n".join(current_errors) if current_errors else None # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    logger.info(f"[{bot_username}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ: {processed_in_this_run}. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(current_errors)}.")
    if last_job_error:
        await notify_owner(context, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π:\n{last_job_error}")