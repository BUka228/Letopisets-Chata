# jobs.py
import logging
import asyncio
import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError, NetworkError, BadRequest # –î–æ–±–∞–≤–ª—è–µ–º BadRequest –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
from typing import Dict, List, Any, Optional
# –ò–º–ø–æ—Ä—Ç –¥–ª—è Retries
from tenacity import retry, stop_after_attempt, wait_fixed, wait_exponential, retry_if_exception_type, before_sleep_log

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
import data_manager as dm
import gemini_client as gc # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π gemini_client —Å safe_generate_story
from config import BOT_OWNER_ID # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ BOT_OWNER_ID
from localization import get_text, get_chat_lang # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

logger = logging.getLogger(__name__)
retry_log = logging.getLogger(__name__ + '.retry') # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è retries

# --- –ö–û–ù–°–¢–ê–ù–¢–ê ---
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
MAX_PHOTOS_TO_ANALYZE = 5

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ job) ---
last_job_run_time: Optional[datetime.datetime] = None
last_job_error: Optional[str] = None

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É ---
async def notify_owner(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞."""
    if not context.bot:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return
    if BOT_OWNER_ID and BOT_OWNER_ID != 0:
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            max_len = 4000
            truncated_message = message[:max_len] + '...' if len(message) > max_len else message
            await context.bot.send_message(chat_id=BOT_OWNER_ID, text=f"üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –õ–µ—Ç–æ–ø–∏—Å—Ü–∞:\n\n{truncated_message}")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É (ID: {BOT_OWNER_ID})")
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É (ID: {BOT_OWNER_ID}): {e}")
        except Exception as e:
             logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}", exc_info=True)
    else:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤–∞–∂–Ω—ã–º (—Å–æ–¥–µ—Ä–∂–∏—Ç "–æ—à–∏–±–∫–∞" –∏–ª–∏ "failed")
        if "–æ—à–∏–±–∫–∞" in message.lower() or "failed" in message.lower() or "error" in message.lower():
            logger.warning("BOT_OWNER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–µ—Ç—Ä–∞—è–º–∏ ---
@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(3), # –ñ–¥–∞—Ç—å 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    retry=retry_if_exception_type((TelegramError, NetworkError, TimeoutError)), # –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
    before_sleep=before_sleep_log(retry_log, logging.WARNING) # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
)
async def download_single_image(context: ContextTypes.DEFAULT_TYPE, file_id: str, chat_id_for_log: int) -> Optional[bytes]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    log_prefix = f"[Chat {chat_id_for_log}]"
    if context.bot is None:
        logger.error(f"{log_prefix} –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}.")
        return None
    try:
        logger.debug(f"{log_prefix} –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è file_id={file_id}...")
        file = await context.bot.get_file(file_id)
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—Ä–µ–º—è –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        image_bytearray = await asyncio.wait_for(file.download_as_bytearray(), timeout=30.0)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024 # 20 MB (–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç Gemini)
        if len(image_bytearray) > MAX_FILE_SIZE_BYTES:
            logger.warning(f"{log_prefix} –§–æ—Ç–æ {file_id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({len(image_bytearray)} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return None

        logger.debug(f"{log_prefix} –§–æ—Ç–æ {file_id} ({len(image_bytearray)} –±–∞–π—Ç) —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ.")
        return bytes(image_bytearray)
    except asyncio.TimeoutError:
        logger.error(f"{log_prefix} –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}.")
        return None # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ asyncio
    except (TelegramError, NetworkError) as e:
         logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ Telegram/–°–µ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e.__class__.__name__} - {e}")
         raise # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ retry
    except Exception as e:
         logger.error(f"{log_prefix} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}", exc_info=True)
         return None # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö


async def download_images(
    context: ContextTypes.DEFAULT_TYPE,
    messages: List[Dict[str, Any]],
    chat_id: int,
    max_photos: int
) -> Dict[str, bytes]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è download_single_image —Å retries."""
    images_data: Dict[str, bytes] = {}
    photo_messages = [m for m in messages if m.get('type') == 'photo' and m.get('file_id') and m.get('file_unique_id')]
    if not photo_messages: return images_data

    photo_messages.sort(key=lambda x: x.get('timestamp', ''))
    logger.info(f"[Chat {chat_id}] –ù–∞–π–¥–µ–Ω–æ {len(photo_messages)} —Ñ–æ—Ç–æ. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ {max_photos}...")

    tasks = []
    unique_ids_to_download = [] # –•—Ä–∞–Ω–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    # –û—Ç–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
    processed_unique_ids = set()
    for msg in photo_messages:
         if len(unique_ids_to_download) >= max_photos: break
         file_unique_id = msg.get('file_unique_id')
         file_id = msg.get('file_id')
         if file_unique_id and file_id and file_unique_id not in processed_unique_ids:
             tasks.append(asyncio.create_task(download_single_image(context, file_id, chat_id)))
             unique_ids_to_download.append(file_unique_id)
             processed_unique_ids.add(file_unique_id)

    if not tasks: return images_data

    logger.debug(f"[Chat {chat_id}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} –∑–∞–¥–∞—á —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    results = await asyncio.gather(*tasks, return_exceptions=True) # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_downloads = 0
    for i, unique_id in enumerate(unique_ids_to_download):
        result = results[i]
        if isinstance(result, bytes): # –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            images_data[unique_id] = result
            successful_downloads += 1
            logger.debug(f"[Chat {chat_id}] –§–æ—Ç–æ {unique_id} ({len(result)} –±–∞–π—Ç) —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        elif isinstance(result, Exception): # –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ retries
            logger.error(f"[Chat {chat_id}] –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ unique_id={unique_id}: {result.__class__.__name__}")
        else: # –í–µ—Ä–Ω—É–ª—Å—è None –∏–ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ
            logger.warning(f"[Chat {chat_id}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è {unique_id} –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –±–∞–π—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞).")

    logger.info(f"[Chat {chat_id}] –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {successful_downloads} –∏–∑ {len(unique_ids_to_download)} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.")
    return images_data

# --- –û—Å–Ω–æ–≤–Ω–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ---
async def daily_story_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–π —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞."""
    global last_job_run_time, last_job_error # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    job_start_time = datetime.datetime.now(datetime.timezone.utc)
    last_job_run_time = job_start_time # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞

    bot = context.bot
    if bot is None: logger.error("–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ daily_story_job!"); return
    bot_username = "UnknownBot"
    try: bot_username = (await bot.get_me()).username or "UnknownBot"
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞: {e}")

    logger.info(f"[{bot_username}] –ó–∞–ø—É—Å–∫ –ï–ñ–ï–î–ù–ï–í–ù–û–ô –ó–ê–î–ê–ß–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π...")
    enabled_chat_ids = dm.get_enabled_chats()
    if not enabled_chat_ids: logger.info(f"[{bot_username}] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤."); return

    total_chats = len(enabled_chat_ids)
    processed_chats_count = 0
    failed_chats_count = 0
    global_error_summary = []

    logger.info(f"[{bot_username}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_chats} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    for i, chat_id in enumerate(enabled_chat_ids):
        current_chat_log_prefix = f"[{bot_username}][Chat {chat_id} ({i+1}/{total_chats})]"
        logger.info(f"{current_chat_log_prefix} –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        story_sent_successfully = False
        chat_lang = await get_chat_lang(chat_id)

        try:
            messages = dm.get_messages_for_chat(chat_id)
            if not messages:
                logger.info(f"{current_chat_log_prefix} –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î."); dm.clear_messages_for_chat(chat_id); await asyncio.sleep(0.1); continue

            logger.info(f"{current_chat_log_prefix} –°–æ–±—Ä–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â.")
            # --- –í—ã–∑–æ–≤ download_images —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π ---
            downloaded_images = await download_images(context, messages, chat_id, MAX_PHOTOS_TO_ANALYZE)
            prepared_content = gc.prepare_story_parts(messages, downloaded_images)

            if not prepared_content:
                logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç."); global_error_summary.append(f"Chat {chat_id}: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"); failed_chats_count += 1; await asyncio.sleep(0.5); continue

            # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_generate_story –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–∫—Å–∏ —Å retries ---
            story, error_msg = await gc.safe_generate_story(prepared_content)

            if story:
                # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
                try:
                    photo_note_str = get_text("photo_info_text", chat_lang, count=MAX_PHOTOS_TO_ANALYZE) if downloaded_images else ""
                    header_key = "daily_story_header"; full_message_text = get_text(header_key, chat_lang, photo_info=photo_note_str) + story
                    MAX_MSG_LEN = 4096; sent_message = None
                    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üëç", callback_data="feedback_good_placeholder"), InlineKeyboardButton("üëé", callback_data="feedback_bad_placeholder")]]) # –ó–∞–≥–ª—É—à–∫–∞

                    if len(full_message_text) > MAX_MSG_LEN:
                         logger.warning(f"{current_chat_log_prefix} –ò—Å—Ç–æ—Ä–∏—è –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º.")
                         header_long_key = "daily_story_header_long"; await bot.send_message(chat_id=chat_id, text=get_text(header_long_key, chat_lang, photo_info=photo_note_str)); await asyncio.sleep(0.5)
                         parts = [story[j:j+MAX_MSG_LEN] for j in range(0, len(story), MAX_MSG_LEN)]
                         for k, part in enumerate(parts):
                             # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                             current_reply_markup = keyboard if k == len(parts) - 1 else None
                             sent_message = await bot.send_message(chat_id=chat_id, text=part, reply_markup=current_reply_markup); await asyncio.sleep(0.5)
                    else: sent_message = await bot.send_message(chat_id=chat_id, text=full_message_text, reply_markup=keyboard)

                    # –û–±–Ω–æ–≤–ª—è–µ–º callback_data –≤ –∫–Ω–æ–ø–∫–∞—Ö ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if sent_message:
                         keyboard_updated = InlineKeyboardMarkup([[ InlineKeyboardButton("üëç", callback_data=f"feedback_good_{sent_message.message_id}"), InlineKeyboardButton("üëé", callback_data=f"feedback_bad_{sent_message.message_id}") ]])
                         try: await bot.edit_message_reply_markup(chat_id=chat_id, message_id=sent_message.message_id, reply_markup=keyboard_updated)
                         # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É BadRequest (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É)
                         except BadRequest as e_br: logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è msg {sent_message.message_id}: {e_br}")
                         except TelegramError as e_edit: logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è msg {sent_message.message_id}: {e_edit}")

                    logger.info(f"{current_chat_log_prefix} –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."); story_sent_successfully = True
                    if error_msg: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –æ—Ç –ø—Ä–æ–∫—Å–∏
                         try: await bot.send_message(chat_id=chat_id, text=get_text("proxy_note", chat_lang, note=error_msg))
                         except Exception as e: logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {e}")
                except TelegramError as e: # –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram
                    logger.error(f"{current_chat_log_prefix} –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"); error_str = str(e).lower(); is_fatal_tg_error = False
                    if "bot was blocked" in error_str or "user is deactivated" in error_str or "chat not found" in error_str or "bot was kicked" in error_str or "chat_write_forbidden" in error_str:
                         logger.warning(f"{current_chat_log_prefix} –ù–µ—É—Å—Ç—Ä–∞–Ω–∏–º–∞—è –æ—à–∏–±–∫–∞ Telegram. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ."); dm.clear_messages_for_chat(chat_id); is_fatal_tg_error = True
                    global_error_summary.append(f"Chat {chat_id}: TG Error ({e.__class__.__name__})"); failed_chats_count += 1
                    if not is_fatal_tg_error: 
                        try: await bot.send_message(chat_id=chat_id, text=get_text("error_telegram", chat_lang, error=e)) 
                        except Exception: pass
                except Exception as e: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    logger.error(f"{current_chat_log_prefix} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True); global_error_summary.append(f"Chat {chat_id}: Send Error ({e.__class__.__name__})"); failed_chats_count += 1; 
                    try: await bot.send_message(chat_id=chat_id, text=get_text("error_unexpected_send", chat_lang)) 
                    except Exception: pass
            else: # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (story is None)
                logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü—Ä–∏—á–∏–Ω–∞: {error_msg}"); global_error_summary.append(f"Chat {chat_id}: Generation Error ({error_msg or 'Unknown'})"); failed_chats_count += 1
                try: await bot.send_message(chat_id=chat_id, text=get_text("daily_job_failed_chat", chat_lang, error=error_msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                except TelegramError as e_err: # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                    error_str = str(e_err).lower()
                    if "bot was blocked" in error_str or "user is deactivated" in error_str or "chat not found" in error_str or "bot was kicked" in error_str or "chat_write_forbidden" in error_str: logger.warning(f"{current_chat_log_prefix} –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ TG –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ."); dm.clear_messages_for_chat(chat_id)
                    else: logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e_err}")
                except Exception as e: logger.error(f"{current_chat_log_prefix} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        except Exception as e: # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —á–∞—Ç–∞
             logger.error(f"{current_chat_log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞: {e}", exc_info=True); global_error_summary.append(f"Chat {chat_id}: Critical Error ({e.__class__.__name__})"); failed_chats_count += 1

        # --- –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        if story_sent_successfully:
            dm.clear_messages_for_chat(chat_id); processed_chats_count += 1
        else:
            if dm.get_messages_for_chat(chat_id): logger.warning(f"{current_chat_log_prefix} –î–∞–Ω–Ω—ã–µ –ù–ï –æ—á–∏—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")

        # --- –ü–∞—É–∑–∞ ---
        logger.debug(f"{current_chat_log_prefix} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–∞—É–∑–∞...")
        await asyncio.sleep(5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
    job_end_time = datetime.datetime.now(datetime.timezone.utc); duration = job_end_time - job_start_time
    last_job_error = "\n".join(global_error_summary) if global_error_summary else None # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏
    logger.info(f"[{bot_username}] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration}. –£—Å–ø–µ—à–Ω–æ: {processed_chats_count}/{total_chats}. –û—à–∏–±–æ–∫: {failed_chats_count}.")
    if failed_chats_count > 0:
        await notify_owner(context, f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å {failed_chats_count} –æ—à–∏–±–∫–∞–º–∏:\n{last_job_error}")