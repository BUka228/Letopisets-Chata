# jobs.py
import logging
import asyncio
from telegram.ext import ContextTypes
from telegram.error import TelegramError, NetworkError
from typing import Dict, List, Any, Optional # –î–æ–±–∞–≤–ª–µ–Ω Optional

import data_manager as dm
import gemini_client as gc

logger = logging.getLogger(__name__)

MAX_PHOTOS_TO_ANALYZE = 5

async def download_images(
    context: ContextTypes.DEFAULT_TYPE,
    messages: List[Dict[str, Any]],
    chat_id: int,
    max_photos: int
) -> Dict[str, bytes]:
    images_data: Dict[str, bytes] = {}
    photo_messages = [
        m for m in messages
        if m.get('type') == 'photo' and m.get('file_id') and m.get('file_unique_id')
    ]
    if not photo_messages:
        logger.debug(f"[Chat {chat_id}] –§–æ—Ç–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return images_data
    photo_messages.sort(key=lambda x: x.get('timestamp', ''))
    logger.info(f"[Chat {chat_id}] –ù–∞–π–¥–µ–Ω–æ {len(photo_messages)} —Ñ–æ—Ç–æ. –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å –¥–æ {max_photos} —à—Ç.")
    download_count = 0
    for msg in photo_messages:
        if download_count >= max_photos:
            logger.info(f"[Chat {chat_id}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_photos}) —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ.")
            break
        file_id = msg['file_id']
        file_unique_id = msg['file_unique_id']
        if file_unique_id in images_data: continue
        try:
            logger.debug(f"[Chat {chat_id}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ file_id={file_id} (unique: {file_unique_id})...")
            if context.bot is None: # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
                logger.error(f"[Chat {chat_id}] –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}.")
                continue
            file = await context.bot.get_file(file_id)
            image_bytearray = await file.download_as_bytearray()
            images_data[file_unique_id] = bytes(image_bytearray)
            download_count += 1
            logger.debug(f"[Chat {chat_id}] –§–æ—Ç–æ {file_unique_id} ({len(image_bytearray)} –±–∞–π—Ç) —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ.")
            await asyncio.sleep(0.3)
        except (TelegramError, NetworkError, TimeoutError) as e:
            logger.error(f"[Chat {chat_id}] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ file_id={file_id}: {e.__class__.__name__}: {e}")
        except Exception as e:
             logger.error(f"[Chat {chat_id}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ file_id={file_id}: {e}", exc_info=True)
    logger.info(f"[Chat {chat_id}] –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {download_count} —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    return images_data

async def daily_story_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.bot is None:
        logger.error("–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ jobs.daily_story_job.")
        return
    bot_username = "UnknownBot"
    try:
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username or "UnknownBot"
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
    logger.info(f"[{bot_username}] –ó–∞–ø—É—Å–∫ –ï–ñ–ï–î–ù–ï–í–ù–û–ô –ó–ê–î–ê–ß–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π (—Å Vision, SQLite)...")
    all_chat_ids = dm.get_all_chat_ids()
    if not all_chat_ids:
        logger.info(f"[{bot_username}] –ù–µ—Ç —á–∞—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ë–î –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return
    total_chats = len(all_chat_ids)
    processed_chats_count = 0
    logger.info(f"[{bot_username}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_chats} —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    for i, chat_id in enumerate(all_chat_ids):
        current_chat_log_prefix = f"[{bot_username}][Chat {chat_id} ({i+1}/{total_chats})]"
        logger.info(f"{current_chat_log_prefix} –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        story_sent_successfully = False # –§–ª–∞–≥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        try:
            messages_to_process = dm.get_messages_for_chat(chat_id)
            if not messages_to_process:
                logger.warning(f"{current_chat_log_prefix} –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î. –û—á–∏—â–∞–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ).")
                dm.clear_messages_for_chat(chat_id)
                await asyncio.sleep(0.5)
                continue
            logger.info(f"{current_chat_log_prefix} –°–æ–±—Ä–∞–Ω–æ {len(messages_to_process)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î.")
            downloaded_images = await download_images(context, messages_to_process, chat_id, MAX_PHOTOS_TO_ANALYZE)
            gemini_input_content = gc.prepare_story_parts(messages_to_process, downloaded_images)
            if not gemini_input_content:
                 logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Gemini. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç.")
                 await asyncio.sleep(1)
                 continue
            story, note_or_error = await gc.generate_story_from_proxy(gemini_input_content)
            if story:
                try:
                    MAX_MESSAGE_LENGTH = 4000
                    photo_note = f" (—Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ {MAX_PHOTOS_TO_ANALYZE} —Ñ–æ—Ç–æ)" if downloaded_images else ""
                    final_text_header = f"üìù –ò—Å—Ç–æ—Ä–∏—è –¥–Ω—è{photo_note}:\n\n"
                    full_message_text = final_text_header + story
                    if len(full_message_text) > MAX_MESSAGE_LENGTH:
                        logger.warning(f"{current_chat_log_prefix} –ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º.")
                        await context.bot.send_message(chat_id=chat_id, text=f"üìù –ò—Å—Ç–æ—Ä–∏—è –¥–Ω—è{photo_note} –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ–±—ä–µ–º–Ω–æ–π, –≤–æ—Ç –æ–Ω–∞:")
                        await asyncio.sleep(0.5)
                        parts = [story[j:j+MAX_MESSAGE_LENGTH] for j in range(0, len(story), MAX_MESSAGE_LENGTH)]
                        for k, part in enumerate(parts):
                            await context.bot.send_message(chat_id=chat_id, text=part)
                            await asyncio.sleep(0.5)
                    else:
                         await context.bot.send_message(chat_id=chat_id, text=full_message_text)
                    logger.info(f"{current_chat_log_prefix} –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
                    story_sent_successfully = True
                    if note_or_error:
                        try: await context.bot.send_message(chat_id=chat_id, text=f"‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note_or_error}")
                        except TelegramError as e_warn: logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {e_warn}")
                except TelegramError as e:
                    logger.error(f"{current_chat_log_prefix} –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e.__class__.__name__}: {e}")
                    error_str = str(e).lower()
                    if "bot was blocked" in error_str or "user is deactivated" in error_str or \
                       "chat not found" in error_str or "bot was kicked" in error_str or \
                       "chat_write_forbidden" in error_str:
                         logger.warning(f"{current_chat_log_prefix} –ù–µ—É—Å—Ç—Ä–∞–Ω–∏–º–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ.")
                         dm.clear_messages_for_chat(chat_id)
                except Exception as e:
                     logger.error(f"{current_chat_log_prefix} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
            else:
                logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü—Ä–∏—á–∏–Ω–∞: {note_or_error}")
                if note_or_error and "–æ—à–∏–±–∫–∞" not in note_or_error.lower():
                     try:
                         await context.bot.send_chat_action(chat_id=chat_id, action='typing')
                         await asyncio.sleep(0.1)
                         await context.bot.send_message(chat_id=chat_id, text=f"üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è.\n–ü—Ä–∏—á–∏–Ω–∞: {note_or_error}")
                     except TelegramError as e_err:
                         logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e_err}")
                         error_str = str(e_err).lower()
                         if "bot was blocked" in error_str or "user is deactivated" in error_str or \
                            "chat not found" in error_str or "bot was kicked" in error_str or \
                            "chat_write_forbidden" in error_str:
                               logger.warning(f"{current_chat_log_prefix} –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                               dm.clear_messages_for_chat(chat_id)
        except Exception as e:
             # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
             logger.error(f"{current_chat_log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞: {e}", exc_info=True)
             # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã —Ä–∞–Ω–µ–µ

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if story_sent_successfully:
            dm.clear_messages_for_chat(chat_id)
            processed_chats_count += 1
        else:
            current_messages_after_attempt = dm.get_messages_for_chat(chat_id)
            if current_messages_after_attempt:
                 logger.warning(f"{current_chat_log_prefix} –î–∞–Ω–Ω—ã–µ –ù–ï –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")

        logger.debug(f"{current_chat_log_prefix} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–∞—É–∑–∞...")
        await asyncio.sleep(5)
    logger.info(f"[{bot_username}] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—á–∏—â–µ–Ω–æ —á–∞—Ç–æ–≤: {processed_chats_count}/{total_chats}")