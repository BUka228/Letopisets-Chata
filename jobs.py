# jobs.py
import logging
import asyncio
from telegram.ext import ContextTypes
from telegram.error import TelegramError, NetworkError
from typing import Dict, List, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ API
import data_manager as dm # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å SQLite
import gemini_client as gc # –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å

logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
MAX_PHOTOS_TO_ANALYZE = 5 # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

async def download_images(
    context: ContextTypes.DEFAULT_TYPE,
    messages: List[Dict[str, Any]], # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
    chat_id: int,
    max_photos: int
) -> Dict[str, bytes]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ 'photo' –ø–æ file_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {file_unique_id: image_bytes}.
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ.
    """
    images_data: Dict[str, bytes] = {}
    # –û—Ç–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ 'photo' —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ ID
    photo_messages = [
        m for m in messages
        if m.get('type') == 'photo' and m.get('file_id') and m.get('file_unique_id')
    ]

    if not photo_messages:
        logger.debug(f"[Chat {chat_id}] –§–æ—Ç–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return images_data

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–µ —Ñ–æ—Ç–æ –¥–Ω—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ timestamp
    photo_messages.sort(key=lambda x: x.get('timestamp', ''))

    logger.info(f"[Chat {chat_id}] –ù–∞–π–¥–µ–Ω–æ {len(photo_messages)} —Ñ–æ—Ç–æ. –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å –¥–æ {max_photos} —à—Ç.")
    download_count = 0

    for msg in photo_messages:
        if download_count >= max_photos:
            logger.info(f"[Chat {chat_id}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_photos}) —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            break

        file_id = msg['file_id']
        file_unique_id = msg['file_unique_id']

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ —Å–∫–∞—á–∞–ª–∏ (–Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if file_unique_id in images_data:
            continue

        try:
            logger.debug(f"[Chat {chat_id}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ file_id={file_id} (unique: {file_unique_id})...")
            file = await context.bot.get_file(file_id)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            image_bytearray = await file.download_as_bytearray()
            # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20MB - –ª–∏–º–∏—Ç Gemini API)
            # MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024
            # if len(image_bytearray) > MAX_FILE_SIZE_BYTES:
            #     logger.warning(f"[Chat {chat_id}] –§–æ—Ç–æ {file_unique_id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({len(image_bytearray)} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            #     continue

            images_data[file_unique_id] = bytes(image_bytearray) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –±–∞–π—Ç—ã
            download_count += 1
            logger.debug(f"[Chat {chat_id}] –§–æ—Ç–æ {file_unique_id} ({len(image_bytearray)} –±–∞–π—Ç) —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ.")
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram API
            await asyncio.sleep(0.3) # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –ø–∞—É–∑—É
        except (TelegramError, NetworkError, TimeoutError) as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏/Telegram
            logger.error(f"[Chat {chat_id}] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ file_id={file_id}: {e.__class__.__name__}: {e}")
        except Exception as e:
             # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
             logger.error(f"[Chat {chat_id}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ file_id={file_id}: {e}", exc_info=True)

    logger.info(f"[Chat {chat_id}] –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {download_count} —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    return images_data


async def daily_story_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π,
    –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite.
    """
    if context.bot is None:
        logger.error("–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ jobs.daily_story_job. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
        return

    bot_username = "UnknownBot"
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username or "UnknownBot"
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")

    logger.info(f"[{bot_username}] –ó–∞–ø—É—Å–∫ –ï–ñ–ï–î–ù–ï–í–ù–û–ô –ó–ê–î–ê–ß–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π (—Å Vision, SQLite)...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –∏–∑ –ë–î
    all_chat_ids = dm.get_all_chat_ids()
    if not all_chat_ids:
        logger.info(f"[{bot_username}] –ù–µ—Ç —á–∞—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ë–î –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    total_chats = len(all_chat_ids)
    processed_chats_count = 0
    logger.info(f"[{bot_username}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_chats} —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for i, chat_id in enumerate(all_chat_ids):
        current_chat_log_prefix = f"[{bot_username}][Chat {chat_id} ({i+1}/{total_chats})]"
        logger.info(f"{current_chat_log_prefix} –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
        messages_to_process = dm.get_messages_for_chat(chat_id)

        if not messages_to_process:
            # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ get_all_chat_ids —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä–Ω–æ,
            # –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º, –µ—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç
            logger.warning(f"{current_chat_log_prefix} –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î, —Ö–æ—Ç—è ID –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ. –û—á–∏—â–∞–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ).")
            dm.clear_messages_for_chat(chat_id)
            await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —á–∞—Ç–æ–º
            continue

        logger.info(f"{current_chat_log_prefix} –°–æ–±—Ä–∞–Ω–æ {len(messages_to_process)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î.")

        # 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        downloaded_images = await download_images(context, messages_to_process, chat_id, MAX_PHOTOS_TO_ANALYZE)

        # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Gemini
        gemini_input_content = gc.prepare_story_parts(messages_to_process, downloaded_images)
        if not gemini_input_content:
             logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Gemini (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç.")
             # –û—á–∏—â–∞—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ? –°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —Ç.–∫. —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∞ –Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
             await asyncio.sleep(1)
             continue

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Gemini API
        story, note_or_error = await gc.generate_story_from_gemini(gemini_input_content)

        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —á–∞—Ç
        story_sent_successfully = False
        if story:
            try:
                MAX_MESSAGE_LENGTH = 4000
                photo_note = f" (—Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ {MAX_PHOTOS_TO_ANALYZE} —Ñ–æ—Ç–æ)" if downloaded_images else ""
                final_text_header = f"üìù –ò—Å—Ç–æ—Ä–∏—è –¥–Ω—è{photo_note}:\n\n"
                full_message_text = final_text_header + story

                if len(full_message_text) > MAX_MESSAGE_LENGTH:
                    logger.warning(f"{current_chat_log_prefix} –ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(full_message_text)}), —Ä–∞–∑–±–∏–≤–∞–µ–º.")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                    await context.bot.send_message(chat_id=chat_id, text=f"üìù –ò—Å—Ç–æ—Ä–∏—è –¥–Ω—è{photo_note} –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ–±—ä–µ–º–Ω–æ–π, –≤–æ—Ç –æ–Ω–∞:")
                    await asyncio.sleep(0.5)
                    # –†–∞–∑–±–∏–≤–∞–µ–º *–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é* –∏—Å—Ç–æ—Ä–∏—é –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    parts = [story[j:j+MAX_MESSAGE_LENGTH] for j in range(0, len(story), MAX_MESSAGE_LENGTH)]
                    for k, part in enumerate(parts):
                        await context.bot.send_message(chat_id=chat_id, text=part)
                        await asyncio.sleep(0.5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                else:
                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                     await context.bot.send_message(chat_id=chat_id, text=full_message_text)

                logger.info(f"{current_chat_log_prefix} –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
                story_sent_successfully = True # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ —É—Å–ø–µ—Ö–∞

                # –ï—Å–ª–∏ –±—ã–ª–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (note) –æ—Ç Gemini, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
                if note_or_error:
                    try:
                        await context.bot.send_message(chat_id=chat_id, text=f"‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {note_or_error}")
                        logger.info(f"{current_chat_log_prefix} –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                    except TelegramError as e_warn:
                         # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ —Å—á–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–µ—É—Å–ø–µ—à–Ω–æ–π
                         logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {e_warn}")

            except TelegramError as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –û–°–ù–û–í–ù–û–ô –∏—Å—Ç–æ—Ä–∏–∏
                logger.error(f"{current_chat_log_prefix} –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e.__class__.__name__}: {e}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º—ã–µ –æ—à–∏–±–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                error_str = str(e).lower()
                if "bot was blocked" in error_str or \
                   "user is deactivated" in error_str or \
                   "chat not found" in error_str or \
                   "bot was kicked" in error_str or \
                   "chat_write_forbidden" in error_str: # –î–æ–±–∞–≤–ª–µ–Ω–æ: –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å
                     logger.warning(f"{current_chat_log_prefix} –ù–µ—É—Å—Ç—Ä–∞–Ω–∏–º–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ({e.__class__.__name__}). –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
                     # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Ç.–∫. –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
                     dm.clear_messages_for_chat(chat_id)
                # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ç.–¥.)
                # story_sent_successfully –æ—Å—Ç–∞–µ—Ç—Å—è False, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—á–∏—â–∞—é—Ç—Å—è

            except Exception as e:
                 # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                 logger.error(f"{current_chat_log_prefix} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
                 # story_sent_successfully –æ—Å—Ç–∞–µ—Ç—Å—è False

        else:
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ù–ï –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (story is None)
            logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç API: {note_or_error}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ API
            # –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            if note_or_error and "–æ—à–∏–±–∫–∞" not in note_or_error.lower(): # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ API
                 try:
                     # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—à–∏–±–∫–∏
                     await context.bot.send_chat_action(chat_id=chat_id, action='typing')
                     await asyncio.sleep(0.1) # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                     await context.bot.send_message(chat_id=chat_id, text=f"üòï –°–µ–≥–æ–¥–Ω—è –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è.\n–ü—Ä–∏—á–∏–Ω–∞: {note_or_error}")
                 except TelegramError as e_err:
                     # –ï—Å–ª–∏ –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
                     logger.warning(f"{current_chat_log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç: {e_err}")
                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º—ã–µ –æ—à–∏–±–∫–∏ –∏ –æ—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                     error_str = str(e_err).lower()
                     if "bot was blocked" in error_str or \
                        "user is deactivated" in error_str or \
                        "chat not found" in error_str or \
                        "bot was kicked" in error_str or \
                        "chat_write_forbidden" in error_str:
                           logger.warning(f"{current_chat_log_prefix} –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –Ω–µ—É—Å—Ç—Ä–∞–Ω–∏–º–æ–π –æ—à–∏–±–∫–∏ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                           dm.clear_messages_for_chat(chat_id)

        # 6. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–ê
        if story_sent_successfully:
            dm.clear_messages_for_chat(chat_id) # –§—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ª–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            processed_chats_count += 1
        else:
            # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –ò –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram
            current_messages_after_attempt = dm.get_messages_for_chat(chat_id)
            if current_messages_after_attempt: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                 logger.warning(f"{current_chat_log_prefix} –î–∞–Ω–Ω—ã–µ –ù–ï –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Ç–æ–≤
        logger.debug(f"{current_chat_log_prefix} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —á–∞—Ç–æ–º...")
        await asyncio.sleep(5) # –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥

    logger.info(f"[{bot_username}] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—á–∏—â–µ–Ω–æ —á–∞—Ç–æ–≤: {processed_chats_count}/{total_chats}")

    # –í—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. SQLite –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É