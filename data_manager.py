# data_manager.py
import logging
import sqlite3
import threading
import time
import datetime
import pytz
import re # –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏

from typing import List, Dict, Any, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î –∏ —è–∑—ã–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from config import DATA_FILE, DEFAULT_LANGUAGE, SUPPORTED_LANGUAGES

logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º thread-local storage –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î
local_storage = threading.local()

def _get_db_connection() -> sqlite3.Connection:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î SQLite –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ –æ–Ω–æ
    connection = getattr(local_storage, 'connection', None)
    if connection:
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection.execute("PRAGMA schema_version;")
            return connection
        except (sqlite3.ProgrammingError, sqlite3.OperationalError):
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ SQLite, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...")
            close_db_connection() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    retry_count = 0
    max_retries = 3
    while retry_count < max_retries:
        try:
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {threading.current_thread().name} –∫ '{DATA_FILE}'...")
            conn = sqlite3.connect(DATA_FILE, timeout=15, check_same_thread=False)
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            conn.execute("PRAGMA journal_mode=WAL;") # Write-Ahead Logging
            conn.execute("PRAGMA busy_timeout = 5000;") # –ñ–¥–∞—Ç—å 5 —Å–µ–∫ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            conn.execute("PRAGMA foreign_keys = ON;") # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            conn.row_factory = sqlite3.Row # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
            local_storage.connection = conn
            logger.debug("SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ.")
            return conn
        except sqlite3.OperationalError as e:
            if "database is locked" in str(e).lower() and retry_count < max_retries - 1:
                retry_count += 1
                wait_time = (retry_count ** 2) * 0.1 + (retry_count * 0.05) # –ù–µ–±–æ–ª—å—à–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.warning(f"–ë–î '{DATA_FILE}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time:.2f} —Å–µ–∫... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})")
                time.sleep(wait_time)
                continue
            else:
                logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î SQLite '{DATA_FILE}' –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}", exc_info=True)
                raise
        except sqlite3.Error as e:
            logger.critical(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ '{DATA_FILE}': {e}", exc_info=True)
            raise

    # –°—é–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–π—Ç–∏, –Ω–æ –¥–ª—è type checker
    raise sqlite3.Error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ë–î –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")


def close_db_connection():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    connection = getattr(local_storage, 'connection', None)
    if connection:
        logger.debug(f"–ó–∞–∫—Ä—ã—Ç–∏–µ SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {threading.current_thread().name}")
        try:
            connection.close()
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        finally:
            local_storage.connection = None

def _execute_query(sql: str, params: tuple = (), fetch_one: bool = False, fetch_all: bool = False) -> Any:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫."""
    try:
        conn = _get_db_connection()
        cursor = conn.cursor()
        cursor.execute(sql, params)
        if fetch_one:
            return cursor.fetchone()
        if fetch_all:
            return cursor.fetchall()
        conn.commit()
        return cursor.rowcount # –î–ª—è INSERT, UPDATE, DELETE
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLite: {sql} | {params} | {e}", exc_info=True)
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏
            if hasattr(local_storage, 'connection') and local_storage.connection:
                local_storage.connection.rollback()
                logger.warning("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è SQLite –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
        except sqlite3.Error as rollback_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ SQLite: {rollback_e}")
        raise # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ

def _init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î: —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã."""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
        # --- –¢–∞–±–ª–∏—Ü–∞ messages ---
        _execute_query("""
            CREATE TABLE IF NOT EXISTS messages (
                message_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                username TEXT,
                timestamp TEXT NOT NULL, -- –•—Ä–∞–Ω–∏–º –∫–∞–∫ ISO —Å—Ç—Ä–æ–∫—É UTC
                message_type TEXT NOT NULL, -- 'text', 'photo', etc.
                content TEXT, -- –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
                file_id TEXT, -- Telegram file_id
                file_unique_id TEXT, -- Telegram file_unique_id
                file_name TEXT, -- –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–∞—É–¥–∏–æ –∏ —Ç.–¥.
                PRIMARY KEY (chat_id, message_id)
            )
        """)
        _execute_query("CREATE INDEX IF NOT EXISTS idx_messages_chat_id ON messages (chat_id)")
        _execute_query("CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages (timestamp)")
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'messages' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")

        # --- –¢–∞–±–ª–∏—Ü–∞ chat_settings ---
        _execute_query(f"""
            CREATE TABLE IF NOT EXISTS chat_settings (
                chat_id INTEGER PRIMARY KEY,
                lang TEXT DEFAULT '{DEFAULT_LANGUAGE}',
                enabled BOOLEAN DEFAULT 1, -- 1 = True, 0 = False
                custom_schedule_time TEXT DEFAULT NULL, -- –í—Ä–µ–º—è HH:MM UTC –∏–ª–∏ NULL
                timezone TEXT DEFAULT 'UTC', -- pytz Timezone Name
                story_genre TEXT DEFAULT 'default' -- –ö–ª—é—á –∂–∞–Ω—Ä–∞ ('default', 'humor', etc.)
            )
        """)
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (–Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PRAGMA table_info –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–µ–¥ ALTER TABLE
        conn = _get_db_connection()
        cursor = conn.cursor()

        def column_exists(table_name, column_name):
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = [row['name'] for row in cursor.fetchall()]
            return column_name in columns

        if not column_exists('chat_settings', 'custom_schedule_time'):
            _execute_query("ALTER TABLE chat_settings ADD COLUMN custom_schedule_time TEXT DEFAULT NULL")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ 'custom_schedule_time' –≤ 'chat_settings'.")

        if not column_exists('chat_settings', 'timezone'):
            _execute_query("ALTER TABLE chat_settings ADD COLUMN timezone TEXT DEFAULT 'UTC'")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ 'timezone' –≤ 'chat_settings'.")

        if not column_exists('chat_settings', 'story_genre'):
             _execute_query("ALTER TABLE chat_settings ADD COLUMN story_genre TEXT DEFAULT 'default'")
             logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ 'story_genre' –≤ 'chat_settings'.")

        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'chat_settings' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

        # --- –¢–∞–±–ª–∏—Ü–∞ feedback ---
        _execute_query("""
            CREATE TABLE IF NOT EXISTS feedback (
                feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
                message_id INTEGER NOT NULL, -- ID —Å–æ–æ–±—â–µ–Ω–∏—è *—Å –∏—Å—Ç–æ—Ä–∏–µ–π*, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–∑—ã–≤
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                rating INTEGER NOT NULL, -- –ù–∞–ø—Ä–∏–º–µ—Ä, 1 –¥–ª—è üëç, -1 –¥–ª—è üëé
                timestamp TEXT NOT NULL -- –í—Ä–µ–º—è –æ—Ç–∑—ã–≤–∞ –≤ UTC ISO
            )
        """)
        _execute_query("CREATE INDEX IF NOT EXISTS idx_feedback_message ON feedback (chat_id, message_id)")
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'feedback' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")

        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DATA_FILE}' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")
    except Exception as e:
         logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
         raise

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç) –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    _init_db()

def add_message(chat_id: int, message_data: Dict[str, Any]):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if not isinstance(message_data, dict):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Å–ª–æ–≤–∞—Ä—å) –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['message_id', 'user_id', 'timestamp', 'type']
    if not all(field in message_data for field in required_fields):
        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ {message_data.keys()}")
        return

    sql = """
        INSERT OR REPLACE INTO messages
        (chat_id, message_id, user_id, username, timestamp, message_type, content, file_id, file_unique_id, file_name)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """
    params = (
        chat_id,
        message_data.get('message_id'),
        message_data.get('user_id'),
        message_data.get('username'),
        message_data.get('timestamp'), # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ UTC
        message_data.get('type'),
        message_data.get('content'),
        message_data.get('file_id'),
        message_data.get('file_unique_id'),
        message_data.get('file_name')
    )
    try:
        _execute_query(sql, params)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_data.get('message_id')} –¥–æ–±–∞–≤–ª–µ–Ω–æ/–∑–∞–º–µ–Ω–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    except Exception: # –õ–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ _execute_query
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤–Ω—É—Ç—Ä–∏ _execute_query
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_data.get('message_id')} –¥–ª—è —á–∞—Ç–∞ {chat_id}.")

def get_messages_for_chat(chat_id: int) -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    messages = []
    sql = "SELECT * FROM messages WHERE chat_id = ? ORDER BY timestamp ASC"
    try:
        rows = _execute_query(sql, (chat_id,), fetch_all=True)
        if rows:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sqlite3.Row –≤ —Å–ª–æ–≤–∞—Ä–∏ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ
            messages = []
            for row in rows:
                msg_dict = dict(row)
                msg_dict['type'] = msg_dict.pop('message_type', None) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
                messages.append(msg_dict)
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    except Exception: # –õ–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ _execute_query
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    return messages

def clear_messages_for_chat(chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞."""
    sql = "DELETE FROM messages WHERE chat_id = ?"
    try:
        deleted_rows = _execute_query(sql, (chat_id,))
        if deleted_rows is not None and deleted_rows > 0:
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_rows} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} –∏–∑ –ë–î.")
        else:
            logger.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id} –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (deleted_rows={deleted_rows}).")
    except Exception: # –õ–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ _execute_query
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")

# --- –ù–û–í–´–ï –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–∞–º–º–∞—Ä–∏) ---

def get_messages_for_chat_since(chat_id: int, since_datetime_utc: datetime.datetime) -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ UTC."""
    messages = []
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ datetime –∏–º–µ–µ—Ç —Ç–∞–π–º–∑–æ–Ω—É UTC –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ISO —Å—Ç—Ä–æ–∫
    if since_datetime_utc.tzinfo is None:
         since_datetime_utc = pytz.utc.localize(since_datetime_utc)
    else:
         since_datetime_utc = since_datetime_utc.astimezone(pytz.utc)

    since_iso_str = since_datetime_utc.isoformat()
    sql = "SELECT * FROM messages WHERE chat_id = ? AND timestamp >= ? ORDER BY timestamp ASC"
    try:
        rows = _execute_query(sql, (chat_id, since_iso_str), fetch_all=True)
        if rows:
            messages = []
            for row in rows:
                msg_dict = dict(row)
                msg_dict['type'] = msg_dict.pop('message_type', None)
                messages.append(msg_dict)
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å {since_iso_str}.")
    except Exception:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å {since_iso_str}.")
    return messages

def get_messages_for_chat_last_n(chat_id: int, limit: int) -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    messages = []
    if limit <= 0:
        return messages
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ timestamp DESC, –∑–∞—Ç–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ Python
    sql = "SELECT * FROM messages WHERE chat_id = ? ORDER BY timestamp DESC LIMIT ?"
    try:
        rows = _execute_query(sql, (chat_id, limit), fetch_all=True)
        if rows:
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
            messages = []
            for row in reversed(rows):
                msg_dict = dict(row)
                msg_dict['type'] = msg_dict.pop('message_type', None)
                messages.append(msg_dict)
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} (–ª–∏–º–∏—Ç {limit}).")
    except Exception:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    return messages

def get_messages_for_chat_today(chat_id: int) -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (UTC)."""
    today_start_utc = datetime.datetime.now(datetime.timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
    return get_messages_for_chat_since(chat_id, today_start_utc)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ù–∞—Å—Ç—Ä–æ–µ–∫ –ß–∞—Ç–∞ ---
def get_chat_settings(chat_id: int) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ (—è–∑—ã–∫, —Å—Ç–∞—Ç—É—Å, –≤—Ä–µ–º—è, —Ç–∞–π–º–∑–æ–Ω—É, –∂–∞–Ω—Ä).
    –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –∏—Ö —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    sql_select = "SELECT lang, enabled, custom_schedule_time, timezone, story_genre FROM chat_settings WHERE chat_id = ?"
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    sql_insert = f"""
        INSERT OR IGNORE INTO chat_settings
        (chat_id, lang, enabled, custom_schedule_time, timezone, story_genre)
        VALUES (?, ?, ?, ?, ?, ?)
    """
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏ –∫–∞–∫ fallback
    default_settings = {
        'lang': DEFAULT_LANGUAGE,
        'enabled': True, # –í –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ 1
        'custom_schedule_time': None,
        'timezone': 'UTC',
        'story_genre': 'default'
    }
    try:
        row = _execute_query(sql_select, (chat_id,), fetch_one=True)
        if row:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º row –≤ —Å–ª–æ–≤–∞—Ä—å
            settings = dict(row)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º enabled –∏–∑ 0/1 –≤ bool –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            settings['enabled'] = bool(settings.get('enabled', 1)) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ NULL
            return settings
        else:
            # –ù–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            _execute_query(sql_insert, (
                chat_id,
                default_settings['lang'],
                1 if default_settings['enabled'] else 0, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ 1
                default_settings['custom_schedule_time'],
                default_settings['timezone'],
                default_settings['story_genre']
            ))
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            return default_settings
    except Exception: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ _execute_query –∏–ª–∏ –¥—Ä—É–≥–∏–µ
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}. –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_settings # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

def update_chat_setting(chat_id: int, setting_key: str, setting_value: Optional[str | bool | int]) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ç–∞ (lang, enabled, custom_schedule_time, timezone, story_genre).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UPSERT –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ chat_settings, –∫—Ä–æ–º–µ chat_id)
    allowed_keys = ['lang', 'enabled', 'custom_schedule_time', 'timezone', 'story_genre']
    if setting_key not in allowed_keys:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{setting_key}' –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return False

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î ---
    value_to_save: Optional[str | int] = None # –¢–∏–ø –¥–ª—è –ë–î: TEXT –∏–ª–∏ INTEGER (–¥–ª—è boolean)

    if setting_key == 'lang':
        if not isinstance(setting_value, str) or setting_value not in SUPPORTED_LANGUAGES:
            logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ '{setting_value}' –¥–ª—è —á–∞—Ç–∞ {chat_id}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {SUPPORTED_LANGUAGES}")
            return False
        value_to_save = setting_value
    elif setting_key == 'enabled':
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bool –≤ 0 –∏–ª–∏ 1 –¥–ª—è SQLite
        value_to_save = 1 if bool(setting_value) else 0
    elif setting_key == 'custom_schedule_time':
        # –†–∞–∑—Ä–µ—à–∞–µ–º NULL –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è
        if setting_value is None:
            value_to_save = None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç HH:MM
        elif isinstance(setting_value, str) and re.fullmatch(r"^(?:[01]\d|2[0-3]):[0-5]\d$", setting_value):
            value_to_save = setting_value
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ UTC '{setting_value}' –¥–ª—è —á–∞—Ç–∞ {chat_id}. –û–∂–∏–¥–∞–µ—Ç—Å—è HH:MM –∏–ª–∏ None.")
            return False
    elif setting_key == 'timezone':
        if not isinstance(setting_value, str):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è timezone '{setting_value}' (–æ–∂–∏–¥–∞–ª—Å—è str) —á–∞—Ç={chat_id}"); return False
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pytz –∑–Ω–∞–µ—Ç —Ç–∞–∫—É—é —Ç–∞–π–º–∑–æ–Ω—É
            pytz.timezone(setting_value)
            value_to_save = setting_value
        except pytz.exceptions.UnknownTimeZoneError:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞ '{setting_value}' –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return False
    elif setting_key == 'story_genre':
        # TODO: –ó–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –∏–º–ø–æ—Ä—Ç –∏–∑ bot_handlers –∏–ª–∏ config, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç —Ç–∞–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        TEMP_SUPPORTED_GENRES_KEYS = ['default', 'humor', 'detective', 'fantasy', 'news_report']
        if not isinstance(setting_value, str) or setting_value not in TEMP_SUPPORTED_GENRES_KEYS:
             logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∂–∞–Ω—Ä '{setting_value}' –¥–ª—è —á–∞—Ç–∞ {chat_id}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {TEMP_SUPPORTED_GENRES_KEYS}")
             return False
        value_to_save = setting_value
    # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowed_keys
    # --- –ö–æ–Ω–µ—Ü –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---

    # SQL-–∑–∞–ø—Ä–æ—Å UPSERT (INSERT –∏–ª–∏ UPDATE)
    sql = f"""
        INSERT INTO chat_settings (chat_id, {setting_key}) VALUES (?, ?)
        ON CONFLICT(chat_id) DO UPDATE SET {setting_key} = excluded.{setting_key}
    """
    try:
        _execute_query(sql, (chat_id, value_to_save))
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_key}' –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '{value_to_save}'.")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —è–∑—ã–∫–∞
        if setting_key == 'lang' and isinstance(value_to_save, str):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                from localization import update_chat_lang_cache
                update_chat_lang_cache(chat_id, value_to_save)
                logger.debug(f"–ö—ç—à —è–∑—ã–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{value_to_save}'.")
            except ImportError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å localization –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —è–∑—ã–∫–∞.")
            except Exception as cache_e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ —è–∑—ã–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {cache_e}")

        return True # –£—Å–ø–µ—Ö
    except Exception: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ _execute_query
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É '{setting_key}' –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ '{setting_value}'.")
        return False # –ù–µ—É–¥–∞—á–∞

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

def get_chat_language(chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ —á–∞—Ç–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î."""
    # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ localization
    try:
         from localization import get_chat_lang as get_cached_lang
         return get_cached_lang(chat_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    except ImportError: # –ù–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º
         logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å get_chat_lang –∏–∑ localization. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î.")
         settings = get_chat_settings(chat_id) # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
         return settings.get('lang', DEFAULT_LANGUAGE) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π

def get_enabled_chats() -> List[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö 'enabled' = 1 (True)."""
    chat_ids = []
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ chat_id, –≥–¥–µ enabled = 1
    sql = "SELECT chat_id FROM chat_settings WHERE enabled = 1"
    try:
        rows = _execute_query(sql, fetch_all=True)
        if rows:
            chat_ids = [row['chat_id'] for row in rows]
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    except Exception: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ _execute_query
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
    return chat_ids

def get_chat_timezone(chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–π–º–∑–æ–Ω—ã –¥–ª—è —á–∞—Ç–∞ –∏–∑ –ë–î."""
    settings = get_chat_settings(chat_id) # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    tz_str = settings.get('timezone', 'UTC') # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'UTC'
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î)
    try:
        pytz.timezone(tz_str)
        return tz_str
    except pytz.exceptions.UnknownTimeZoneError:
        logger.warning(f"–í –ë–î –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞ '{tz_str}' –¥–ª—è —á–∞—Ç–∞ {chat_id}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        # –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ë–î –∑–¥–µ—Å—å, –Ω–æ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
        # update_chat_setting(chat_id, 'timezone', 'UTC')
        return 'UTC' # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 'UTC' –ø—Ä–∏ –æ—à–∏–±–∫–µ

def get_chat_genre(chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –∂–∞–Ω—Ä–∞ ('default', 'humor', etc.) –¥–ª—è —á–∞—Ç–∞ –∏–∑ –ë–î."""
    settings = get_chat_settings(chat_id) # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    genre = settings.get('story_genre', 'default') # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default'
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    # TODO: –ó–∞–º–µ–Ω–∏—Ç—å TEMP_SUPPORTED_GENRES_KEYS –Ω–∞ –∏–º–ø–æ—Ä—Ç
    TEMP_SUPPORTED_GENRES_KEYS = ['default', 'humor', 'detective', 'fantasy', 'news_report']
    if genre not in TEMP_SUPPORTED_GENRES_KEYS:
        logger.warning(f"–í –ë–î –Ω–∞–π–¥–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∂–∞–Ω—Ä '{genre}' –¥–ª—è —á–∞—Ç–∞ {chat_id}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'default'.")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î
        # update_chat_setting(chat_id, 'story_genre', 'default')
        return 'default'
    return genre

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –û—Ç–∑—ã–≤–æ–≤ ---
def add_feedback(message_id: int, chat_id: int, user_id: int, rating: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1 –¥–ª—è üëç, -1 –¥–ª—è üëé)."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ UTC
    timestamp_utc = datetime.datetime.now(datetime.timezone.utc).isoformat()
    sql = "INSERT INTO feedback (message_id, chat_id, user_id, rating, timestamp) VALUES (?, ?, ?, ?, ?)"
    params = (message_id, chat_id, user_id, rating, timestamp_utc)
    try:
        _execute_query(sql, params)
        logger.info(f"–û—Ç–∑—ã–≤ (rating={rating}) –æ—Ç user {user_id} –¥–ª—è msg {message_id} –≤ —á–∞—Ç–µ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ _execute_query
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç user {user_id} –¥–ª—è msg {message_id}.")


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ---
def close_all_connections():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ)."""
    close_db_connection()