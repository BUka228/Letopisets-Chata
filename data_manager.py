# data_manager.py
import logging
import sqlite3
import threading
import time

from typing import List, Dict, Any, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î –∏ —è–∑—ã–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from config import DATA_FILE, DEFAULT_LANGUAGE, SUPPORTED_LANGUAGES

logger = logging.getLogger(__name__)

local_storage = threading.local()

def _get_db_connection() -> sqlite3.Connection:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î SQLite –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    if not hasattr(local_storage, 'connection') or local_storage.connection is None:
        retry_count = 0; max_retries = 3
        while retry_count < max_retries:
            try:
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {threading.current_thread().name} –∫ '{DATA_FILE}'...")
                conn = sqlite3.connect(DATA_FILE, timeout=15, check_same_thread=False)
                conn.execute("PRAGMA journal_mode=WAL;")
                conn.execute("PRAGMA busy_timeout = 5000;")
                conn.execute("PRAGMA foreign_keys = ON;") # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
                conn.row_factory = sqlite3.Row
                local_storage.connection = conn
                logger.debug("SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ.")
                return conn
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e) and retry_count < max_retries - 1:
                    retry_count += 1; wait_time = (retry_count ** 2) * 0.1
                    logger.warning(f"–ë–î '{DATA_FILE}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time:.2f} —Å–µ–∫...")
                    time.sleep(wait_time); continue
                else: logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î SQLite '{DATA_FILE}': {e}", exc_info=True); raise
            except sqlite3.Error as e: logger.critical(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ '{DATA_FILE}': {e}", exc_info=True); raise
    return local_storage.connection

def close_db_connection():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    if hasattr(local_storage, 'connection') and local_storage.connection is not None:
        logger.debug(f"–ó–∞–∫—Ä—ã—Ç–∏–µ SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {threading.current_thread().name}")
        try: local_storage.connection.close()
        except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        finally: local_storage.connection = None

def _execute_query(sql: str, params: tuple = (), fetch_one: bool = False, fetch_all: bool = False) -> Any:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤."""
    try:
        conn = _get_db_connection()
        cursor = conn.cursor()
        cursor.execute(sql, params)
        if fetch_one: return cursor.fetchone()
        if fetch_all: return cursor.fetchall()
        conn.commit()
        return cursor.rowcount
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLite: {sql} | {params} | {e}", exc_info=True)
        raise # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ

def _init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î: —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã."""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        _execute_query("""
            CREATE TABLE IF NOT EXISTS messages (
                chat_id INTEGER NOT NULL, message_id INTEGER NOT NULL, user_id INTEGER NOT NULL,
                username TEXT, timestamp TEXT NOT NULL, message_type TEXT NOT NULL,
                content TEXT, file_id TEXT, file_unique_id TEXT, file_name TEXT,
                PRIMARY KEY (chat_id, message_id)
            )
        """)
        _execute_query("CREATE INDEX IF NOT EXISTS idx_messages_chat_id ON messages (chat_id)")
        _execute_query("CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages (timestamp)")

        # --- –ù–û–í–û–ï: –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤ ---
        _execute_query(f"""
            CREATE TABLE IF NOT EXISTS chat_settings (
                chat_id INTEGER PRIMARY KEY,
                lang TEXT DEFAULT '{DEFAULT_LANGUAGE}', -- –Ø–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                enabled BOOLEAN DEFAULT 1 -- –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            )
        """)
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'chat_settings' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")

        # --- –ù–û–í–û–ï: –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
        _execute_query("""
            CREATE TABLE IF NOT EXISTS feedback (
                feedback_id INTEGER PRIMARY KEY AUTOINCREMENT, -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞
                message_id INTEGER NOT NULL,  -- ID —Å–æ–æ–±—â–µ–Ω–∏—è *—Å –∏—Å—Ç–æ—Ä–∏–µ–π*, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–Ω –æ—Ç–∑—ã–≤
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,     -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –æ—Ç–∑—ã–≤
                rating INTEGER NOT NULL,      -- –û—Ü–µ–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –¥–ª—è üëç, -1 –¥–ª—è üëé)
                timestamp TEXT NOT NULL     -- –í—Ä–µ–º—è –æ—Ç–∑—ã–≤–∞ (ISO 8601 UTC)
            )
        """)
        _execute_query("CREATE INDEX IF NOT EXISTS idx_feedback_message ON feedback (chat_id, message_id)")
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'feedback' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")

        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DATA_FILE}' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")
    except Exception as e:
         logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
         raise

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_data(): _init_db()
def add_message(chat_id: int, message_data: Dict[str, Any]):
    sql = """INSERT OR REPLACE INTO messages (chat_id, message_id, user_id, username, timestamp, message_type, content, file_id, file_unique_id, file_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
    params = (chat_id, message_data.get('message_id'), message_data.get('user_id'), message_data.get('username'), message_data.get('timestamp'), message_data.get('type'), message_data.get('content'), message_data.get('file_id'), message_data.get('file_unique_id'), message_data.get('file_name'))
    try: _execute_query(sql, params); logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_data.get('message_id')} –¥–æ–±–∞–≤–ª–µ–Ω–æ/–∑–∞–º–µ–Ω–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    except Exception: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_data.get('message_id')} –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
def get_messages_for_chat(chat_id: int) -> List[Dict[str, Any]]:
    messages = []; sql = "SELECT * FROM messages WHERE chat_id = ? ORDER BY timestamp ASC"
    try:
        rows = _execute_query(sql, (chat_id,), fetch_all=True)
        if rows: messages = [dict(row) for row in rows]; [m.update({'type': m.pop('message_type')}) for m in messages]
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    except Exception: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    return messages
def clear_messages_for_chat(chat_id: int):
    sql = "DELETE FROM messages WHERE chat_id = ?"
    try:
        deleted_rows = _execute_query(sql, (chat_id,))
        if deleted_rows > 0: logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_rows} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} –∏–∑ –ë–î.")
    except Exception: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
# def get_all_chat_ids() -> List[int]: # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
#     chat_ids = []; sql = "SELECT DISTINCT chat_id FROM messages"
#     try:
#         rows = _execute_query(sql, fetch_all=True)
#         if rows: chat_ids = [row['chat_id'] for row in rows]
#         logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö chat_id –≤ –ë–î.")
#     except Exception: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ chat_id –∏–∑ –ë–î.")
#     return chat_ids

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è –ù–∞—Å—Ç—Ä–æ–µ–∫ –ß–∞—Ç–∞ ---
def get_chat_settings(chat_id: int) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ (—è–∑—ã–∫, —Å—Ç–∞—Ç—É—Å). –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç."""
    sql_select = "SELECT lang, enabled FROM chat_settings WHERE chat_id = ?"
    sql_insert = f"INSERT OR IGNORE INTO chat_settings (chat_id, lang, enabled) VALUES (?, ?, ?)"
    default_settings = {'lang': DEFAULT_LANGUAGE, 'enabled': True}
    try:
        row = _execute_query(sql_select, (chat_id,), fetch_one=True)
        if row:
            return dict(row)
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            _execute_query(sql_insert, (chat_id, DEFAULT_LANGUAGE, 1))
            return default_settings
    except Exception:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        return default_settings # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

def update_chat_setting(chat_id: int, setting_key: str, setting_value: Any):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —á–∞—Ç–∞."""
    if setting_key not in ['lang', 'enabled']:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{setting_key}' –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    if setting_key == 'lang' and setting_value not in SUPPORTED_LANGUAGES:
        logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ '{setting_value}' –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return
    if setting_key == 'enabled':
        setting_value = 1 if bool(setting_value) else 0 # –ü—Ä–∏–≤–æ–¥–∏–º –∫ 0 –∏–ª–∏ 1

    sql = f"INSERT INTO chat_settings (chat_id, {setting_key}) VALUES (?, ?) ON CONFLICT(chat_id) DO UPDATE SET {setting_key}=excluded.{setting_key}"
    try:
        _execute_query(sql, (chat_id, setting_value))
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_key}' –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '{setting_value}'.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —è–∑—ã–∫–∞, –µ—Å–ª–∏ –º–µ–Ω—è–ª–∏ —è–∑—ã–∫
        if setting_key == 'lang':
            from localization import update_chat_lang_cache # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            update_chat_lang_cache(chat_id, setting_value)
    except Exception:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É '{setting_key}' –¥–ª—è —á–∞—Ç–∞ {chat_id}.")

def get_chat_language(chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ —á–∞—Ç–∞ –∏–∑ –ë–î."""
    settings = get_chat_settings(chat_id)
    return settings.get('lang', DEFAULT_LANGUAGE)

def get_enabled_chats() -> List[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–π."""
    chat_ids = []
    # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç—ã, –≥–¥–µ enabled=1 –∏–ª–∏ –≥–¥–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—â–µ –Ω–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ)
    sql = "SELECT chat_id FROM chat_settings WHERE enabled = 1 UNION SELECT DISTINCT m.chat_id FROM messages m LEFT JOIN chat_settings cs ON m.chat_id = cs.chat_id WHERE cs.chat_id IS NULL"
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ jobs.py
    # sql_alt = "SELECT DISTINCT chat_id FROM messages"
    try:
        rows = _execute_query(sql, fetch_all=True)
        if rows: chat_ids = [row['chat_id'] for row in rows]
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    except Exception:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
    return chat_ids

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è –û–±—Ä–∞—Ç–Ω–æ–π –°–≤—è–∑–∏ ---
def add_feedback(message_id: int, chat_id: int, user_id: int, rating: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    timestamp = datetime.datetime.now(datetime.timezone.utc).isoformat() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π datetime
    sql = "INSERT INTO feedback (message_id, chat_id, user_id, rating, timestamp) VALUES (?, ?, ?, ?, ?)"
    params = (message_id, chat_id, user_id, rating, timestamp)
    try:
        _execute_query(sql, params)
        logger.info(f"–û—Ç–∑—ã–≤ (rating={rating}) –æ—Ç user {user_id} –¥–ª—è msg {message_id} –≤ —á–∞—Ç–µ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç user {user_id} –¥–ª—è msg {message_id}.")

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ---
def close_all_connections(): close_db_connection()